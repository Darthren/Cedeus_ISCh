-5--12
3--4
sin(40)
sin(40)*8
cos(40)*8
sin(80)*6
cos(80)*6
8*cos(320)+6*cos(100)
(8*cos(320))+(6*cos(100))
6*cos(100)
cos(100)
8*cos(320)
?cos
8*cos(320*pi/120)
o <- pi/120
8*cos(320*o)
8cos(30)
8*cos(320*o)
8*cos(320*o)+6*cos(100*o)
(8*cos(320*o))+(6*cos(100*o))
6*cos(100*pi/120)
6*cos(100*o)
6*sin(100*o)
o <- pi/180
(8*cos(320*o))+(6*cos(100*o))
8*sin(320*o)+6*sin(100*o)
8*sin(40*o)+6*sin(10*o)
100+90
90+80
+10
8*sin(40*o)+6*sin(80*o)
magnitude <- function(a,b, aa, ab, operation){
if (operation == "-"){
v <- a*sin(aa*o) - b*sin(ab*o)
} else if (operation == "+"){
w <- a*cos(aa*o) + b*cos(ab*o)
}
return(c(v,w))
}
magnitude(5,8,170,300,"+")
if (operation == "-"){
v <- a*sin(aa*o) - b*sin(ab*o)
w <- a*cos(aa*o) - b*cos(ab*o)
} else if (operation == "+"){
w <- a*cos(aa*o) + b*cos(ab*o)
v <- a*sin(aa*o) - b*sin(ab*o)
}
o <- pi/180
magnitude <- function(a,b, aa, ab, operation){
if (operation == "-"){
v <- a*sin(aa*o) - b*sin(ab*o)
w <- a*cos(aa*o) - b*cos(ab*o)
} else if (operation == "+"){
w <- a*cos(aa*o) + b*cos(ab*o)
v <- a*sin(aa*o) - b*sin(ab*o)
}
return(c(v,w))
}
magnitude(5,8,170,300,"+")
magnitude <- function(a,b, aa, ab, operation){
if (operation == "-"){
v <- a*cos(aa*o) - b*cos(ab*o)
w <- a*sin(aa*o) - b*sin(ab*o)
} else if (operation == "+"){
v <- a*cos(aa*o) + b*cos(ab*o)
w <- a*sin(aa*o) - b*sin(ab*o)
}
return(c(v,w))
}
magnitude(5,8,170,300,"+")
5*sin(170*o) + 8*sin(300*o)
a <- 5
b <- 8
ab <- 170
ab <- 300
aa <- 170
o <- pi/180
magnitude <- function(a,b, aa, ab, operation){
if (operation == "-"){
v <- a*cos(aa*o) - b*cos(ab*o)
w <- a*sin(aa*o) - b*sin(ab*o)
} else if (operation == "+"){
v <- a*cos(aa*o) + b*cos(ab*o)
w <- a*sin(aa*o) + b*sin(ab*o)
}
return(c(v,w))
}
magnitude(5,8,170,300)
magnitude(5,8,170,300, "+")
magnitude(8,5,30,160,"+")
magnitude(7,5,100,290)
magnitude(7,5,100,290, "+")
magnitude(5,70,6,160,"+")
magnitude(5,6,70,160,"+")
?setClass
library(data.table); library(dplyr); library(chron); library(lubridate)
setwd("C:/Users/Rodrigo Villegas/Documents/Cedeus_ISCh/Cedeus_ISCh/45. Tiempos de viaje/")
Corrector.nombre <- function(dataset, nombres, variable.buscar, variable.cambiar, exact.match = F){
if (exact.match == T){
colname <- grep(paste("^", variable.buscar, "$", sep = ""), nombres, ignore.case = T)
} else {
colname <- grep(variable.buscar, nombres, ignore.case = T)
}
if (colnames(dataset)[colname] != variable.cambiar){
colnames(dataset)[colname] <- variable.cambiar
}
return(dataset)
}
ciudades <- read.csv("Otros/Ciudades_Cedeus.csv")
ciudades <- unique(ciudades$Ciudad)
setwd("Raw Data/")
files.viajes <- list.files(pattern = "viajes")
files.personas <- list.files(pattern = "personas")
files.modo <- list.files(pattern = "Modo")
total.ciudad <- data.frame()
setwd("C:/Users/Rodrigo Villegas/Documents/Cedeus_ISCh/Cedeus_ISCh/45. Tiempos de viaje/")
getwd()
setwd("C:/Users/Rodrigo Villegas/Documents/Cedeus_ISCh/Cedeus_ISCh/45. Tiempos de viaje/")
setwd("C:/Users/Rodrigo Villegas/Documents/Cedeus_ISCh/Cedeus_ISCh/15. Tiempos de viaje/")
sub( "_.*$", "", files.viajes )
Corrector.nombre <- function(dataset, nombres, variable.buscar, variable.cambiar, exact.match = F){
if (exact.match == T){
colname <- grep(paste("^", variable.buscar, "$", sep = ""), nombres, ignore.case = T)
} else {
colname <- grep(variable.buscar, nombres, ignore.case = T)
}
if (colnames(dataset)[colname] != variable.cambiar){
colnames(dataset)[colname] <- variable.cambiar
}
return(dataset)
}
ciudades <- read.csv("Otros/Ciudades_Cedeus.csv")
ciudades <- unique(ciudades$Ciudad)
setwd("Raw Data/")
files.viajes <- list.files(pattern = "viajes")
files.personas <- list.files(pattern = "personas")
files.modo <- list.files(pattern = "Modo")
total.ciudad <- data.frame()
files.viajes
sub( "_.*$", "", files.viajes )
setwd("Raw Data/")
files.viajes <- list.files(pattern = "viajes")
files.personas <- list.files(pattern = "personas")
files.modo <- list.files(pattern = "Modo")
total.ciudad <- data.frame()
for (c in seq(files.viajes)){
tmp.viajes <- as.data.frame(fread(files.viajes[c], sep = ";", header = T))
tmp.personas <- as.data.frame(fread(files.personas[c], sep = ";", header = T))
nombre.ciudad <- sub( "_.*$", "", files.viajes[c])
if (grepl("Santiago", files.viajes[c])){
next()
}
# Almacenar los nombres de las columnas.
column_names <- colnames(tmp.viajes)
# Identificar la columna de Tiempos de Viaje / Duración Viaje
t_viajes_colname <- grep("Tiempo", column_names, ignore.case = T)
t_viajes_data <- tmp.viajes[,t_viajes_colname]
# Si los tiempos de viaje están en formato "YMD HMS", corregir
if (nchar(t_viajes_data[1]) == 18){
t_viajes_data <- strptime(t_viajes_data, format = "%d-%m-%Y %H:%M:%S")
t_viajes_data <- format(t_viajes_data,"%H:%M:%S")
}
# Transformar las unidades de tiempo de char a tiempo
tmp.viajes[,t_viajes_colname] <- chron(times= t_viajes_data)
# Estandarizar nombres
tmp.viajes <- Corrector.nombre(tmp.viajes, colnames(tmp.viajes), "tiempo", "TiempoViaje") %>%
Corrector.nombre(colnames(tmp.viajes), "persona", "IDPersona") %>%
Corrector.nombre(colnames(tmp.viajes), "folio", "IDFolio") %>%
Corrector.nombre(colnames(tmp.viajes), "idviaje", "IDViaje") %>%
Corrector.nombre(colnames(tmp.viajes), "Factor", "Factor_Viaje", exact.match = T) %>%
subset(select = c("IDFolio",  "IDPersona", "IDViaje", "TiempoViaje", "Factor_Viaje"))
if (class(tmp.viajes$Factor_Viaje) != "numeric"){
tmp.viajes$Factor_Viaje <- as.numeric(gsub(pattern = ",",replacement = ".", x = tmp.viajes$Factor_Viaje))
}
# Importar tabla con población
tmp.personas <- Corrector.nombre(tmp.personas, colnames(tmp.personas), "persona", "IDPersona") %>%
Corrector.nombre(colnames(tmp.personas), "folio", "IDFolio") %>%
Corrector.nombre(colnames(tmp.personas), "factor", "Factor_Persona") %>%
subset(select = c("IDFolio", "IDPersona", "Factor_Persona"))
if (class(tmp.personas$Factor_Persona) != "numeric"){
tmp.personas$Factor_Persona <- as.numeric(gsub(pattern = ",",replacement = ".", x = tmp.personas$Factor_Persona))
}
tmp <- merge(tmp.personas, tmp.viajes, by = c("IDFolio", "IDPersona"))
tmp.summary.total <- tmp %>%
group_by(IDFolio, IDPersona, IDViaje) %>%
summarise(TiempoViaje.tmp = sum((as.numeric(TiempoViaje)*(24*60*60)*365*Factor_Viaje))
, Factor_Persona = mean(Factor_Persona)) %>%
ungroup() %>%
summarise(Promedio_Anual_Tiempo_Viaje = round(seconds_to_period(sum(TiempoViaje.tmp)/(sum(Factor_Persona)))),
Ciudad = ciudad)
total.ciudad <- rbind(total.ciudad, tmp.summary.total)
}
files.viajes <- list.files(pattern = "viajes")
files.personas <- list.files(pattern = "personas")
files.modo <- list.files(pattern = "Modo")
total.ciudad <- data.frame()
for (c in seq(files.viajes)){
tmp.viajes <- as.data.frame(fread(files.viajes[c], sep = ";", header = T))
tmp.personas <- as.data.frame(fread(files.personas[c], sep = ";", header = T))
nombre.ciudad <- sub( "_.*$", "", files.viajes[c])
if (grepl("Santiago", files.viajes[c])){
next()
}
# Almacenar los nombres de las columnas.
column_names <- colnames(tmp.viajes)
# Identificar la columna de Tiempos de Viaje / Duración Viaje
t_viajes_colname <- grep("Tiempo", column_names, ignore.case = T)
t_viajes_data <- tmp.viajes[,t_viajes_colname]
# Si los tiempos de viaje están en formato "YMD HMS", corregir
if (nchar(t_viajes_data[1]) == 18){
t_viajes_data <- strptime(t_viajes_data, format = "%d-%m-%Y %H:%M:%S")
t_viajes_data <- format(t_viajes_data,"%H:%M:%S")
}
# Transformar las unidades de tiempo de char a tiempo
tmp.viajes[,t_viajes_colname] <- chron(times= t_viajes_data)
# Estandarizar nombres
tmp.viajes <- Corrector.nombre(tmp.viajes, colnames(tmp.viajes), "tiempo", "TiempoViaje") %>%
Corrector.nombre(colnames(tmp.viajes), "persona", "IDPersona") %>%
Corrector.nombre(colnames(tmp.viajes), "folio", "IDFolio") %>%
Corrector.nombre(colnames(tmp.viajes), "idviaje", "IDViaje") %>%
Corrector.nombre(colnames(tmp.viajes), "Factor", "Factor_Viaje", exact.match = T) %>%
subset(select = c("IDFolio",  "IDPersona", "IDViaje", "TiempoViaje", "Factor_Viaje"))
if (class(tmp.viajes$Factor_Viaje) != "numeric"){
tmp.viajes$Factor_Viaje <- as.numeric(gsub(pattern = ",",replacement = ".", x = tmp.viajes$Factor_Viaje))
}
# Importar tabla con población
tmp.personas <- Corrector.nombre(tmp.personas, colnames(tmp.personas), "persona", "IDPersona") %>%
Corrector.nombre(colnames(tmp.personas), "folio", "IDFolio") %>%
Corrector.nombre(colnames(tmp.personas), "factor", "Factor_Persona") %>%
subset(select = c("IDFolio", "IDPersona", "Factor_Persona"))
if (class(tmp.personas$Factor_Persona) != "numeric"){
tmp.personas$Factor_Persona <- as.numeric(gsub(pattern = ",",replacement = ".", x = tmp.personas$Factor_Persona))
}
tmp <- merge(tmp.personas, tmp.viajes, by = c("IDFolio", "IDPersona"))
tmp.summary.total <- tmp %>%
group_by(IDFolio, IDPersona, IDViaje) %>%
summarise(TiempoViaje.tmp = sum((as.numeric(TiempoViaje)*(24*60*60)*365*Factor_Viaje))
, Factor_Persona = mean(Factor_Persona)) %>%
ungroup() %>%
summarise(Promedio_Anual_Tiempo_Viaje = round(seconds_to_period(sum(TiempoViaje.tmp)/(sum(Factor_Persona)))),
Ciudad = nombre.ciudad)
total.ciudad <- rbind(total.ciudad, tmp.summary.total)
}
total.ciudad
files.viajes <- list.files(pattern = "viajes")
files.personas <- list.files(pattern = "personas")
files.modo <- list.files(pattern = "Modo")
total.ciudad <- data.frame()
for (c in seq(files.viajes)){
tmp.viajes <- as.data.frame(fread(files.viajes[c], sep = ";", header = T))
tmp.personas <- as.data.frame(fread(files.personas[c], sep = ";", header = T))
nombre.ciudad <- sub( "_.*$", "", files.viajes[c])
if (grepl("Santiago", files.viajes[c])){
next()
}
# Almacenar los nombres de las columnas.
column_names <- colnames(tmp.viajes)
# Identificar la columna de Tiempos de Viaje / Duración Viaje
t_viajes_colname <- grep("Tiempo", column_names, ignore.case = T)
t_viajes_data <- tmp.viajes[,t_viajes_colname]
# Si los tiempos de viaje están en formato "YMD HMS", corregir
if (nchar(t_viajes_data[1]) == 18){
t_viajes_data <- strptime(t_viajes_data, format = "%d-%m-%Y %H:%M:%S")
t_viajes_data <- format(t_viajes_data,"%H:%M:%S")
}
# Transformar las unidades de tiempo de char a tiempo
tmp.viajes[,t_viajes_colname] <- chron(times= t_viajes_data)
# Estandarizar nombres
tmp.viajes <- Corrector.nombre(tmp.viajes, colnames(tmp.viajes), "tiempo", "TiempoViaje") %>%
Corrector.nombre(colnames(tmp.viajes), "persona", "IDPersona") %>%
Corrector.nombre(colnames(tmp.viajes), "folio", "IDFolio") %>%
Corrector.nombre(colnames(tmp.viajes), "idviaje", "IDViaje") %>%
Corrector.nombre(colnames(tmp.viajes), "Factor", "Factor_Viaje", exact.match = T) %>%
subset(select = c("IDFolio",  "IDPersona", "IDViaje", "TiempoViaje", "Factor_Viaje"))
if (class(tmp.viajes$Factor_Viaje) != "numeric"){
tmp.viajes$Factor_Viaje <- as.numeric(gsub(pattern = ",",replacement = ".", x = tmp.viajes$Factor_Viaje))
}
# Importar tabla con población
tmp.personas <- Corrector.nombre(tmp.personas, colnames(tmp.personas), "persona", "IDPersona") %>%
Corrector.nombre(colnames(tmp.personas), "folio", "IDFolio") %>%
Corrector.nombre(colnames(tmp.personas), "factor", "Factor_Persona") %>%
subset(select = c("IDFolio", "IDPersona", "Factor_Persona"))
if (class(tmp.personas$Factor_Persona) != "numeric"){
tmp.personas$Factor_Persona <- as.numeric(gsub(pattern = ",",replacement = ".", x = tmp.personas$Factor_Persona))
}
tmp <- merge(tmp.personas, tmp.viajes, by = c("IDFolio", "IDPersona"))
tmp.summary.total <- tmp %>%
group_by(IDFolio, IDPersona, IDViaje) %>%
summarise(TiempoViaje.tmp = sum((as.numeric(TiempoViaje)*(24*60*60)*365*Factor_Viaje))
, Factor_Persona = mean(Factor_Persona)) %>%
ungroup() %>%
summarise(Ciudad = nombre.ciudad,
Promedio_Anual_Tiempo_Viaje = round(seconds_to_period(sum(TiempoViaje.tmp)/(sum(Factor_Persona)))))
total.ciudad <- rbind(total.ciudad, tmp.summary.total)
}
View(total.ciudad)
tmp.modo <- as.data.frame(fread(files.modo[c], sep = ";", header = T))
c
files.modo <- list.files(pattern = "Modo")
tmp.modo <- as.data.frame(fread(files.modo[c], sep = ";", header = T))
View(tmp.modo)
c <- 1
tmp.modo <- as.data.frame(fread(files.modo[c], sep = ";", header = T))
View(tmp.personas)
View(tmp.modo)
