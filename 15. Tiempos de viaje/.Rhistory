}
return(dataset)
}
grep(paste("^", "Factor", "$", sep = ""), colnames(tmp.viajes), ignore.case = F)
grep(paste("^", "factor", "$", sep = ""), colnames(tmp.viajes), ignore.case = T)
Corrector.nombre <- function(dataset, nombres, variable.buscar, variable.cambiar, exact.match = F){
if (exact.match == T){
colname <- grep(paste("^", variable.buscar, "$", sep = ""), nombres, ignore.case = T)
} else {
colname <- grep(variable.buscar, nombres, ignore.case = T)
}
if (colnames(dataset)[colname] != variable.cambiar){
colnames(dataset)[colname] <- variable.cambiar
}
return(dataset)
}
tmp.viajes <- Corrector.nombre(tmp.viajes, colnames(tmp.viajes), "tiempo", "TiempoViaje") %>%
Corrector.nombre(colnames(tmp.viajes), "persona", "IDPersona") %>%
Corrector.nombre(colnames(tmp.viajes), "folio", "IDFolio") %>%
Corrector.nombre(colnames(tmp.viajes), "Factor", "Factor_Viaje", exact.match = T)
colnames(tmp.viajes)
tmp.viajes <- subset(tmp.viajes, select = c("IDFolio", "IDPersona", "TiempoViaje", "Factor_Viaje"))
colnames(tmp.viajes)
tmp.viajes <- Corrector.nombre(tmp.viajes, colnames(tmp.viajes), "tiempo", "TiempoViaje") %>%
Corrector.nombre(colnames(tmp.viajes), "persona", "IDPersona") %>%
Corrector.nombre(colnames(tmp.viajes), "folio", "IDFolio") %>%
Corrector.nombre(colnames(tmp.viajes), "idviaje", "IDViaje") %>%
Corrector.nombre(colnames(tmp.viajes), "Factor", "Factor_Viaje", exact.match = T)
tmp.viajes <- as.data.frame(fread(files.viajes[4], sep = ";", header = T))
column_names <- colnames(tmp.viajes)
t_viajes_colname <- grep("Tiempo", column_names, ignore.case = T)
t_viajes_data <- tmp.viajes[,t_viajes_colname]
if (nchar(t_viajes_data[1]) == 18){
t_viajes_data <- strptime(t_viajes_data, format = "%d-%m-%Y %H:%M:%S")
t_viajes_data <- format(t_viajes_data,"%H:%M:%S")
}
tmp.viajes[,t_viajes_colname] <- chron(times= t_viajes_data)
tmp.viajes <- Corrector.nombre(tmp.viajes, colnames(tmp.viajes), "tiempo", "TiempoViaje") %>%
Corrector.nombre(colnames(tmp.viajes), "persona", "IDPersona") %>%
Corrector.nombre(colnames(tmp.viajes), "folio", "IDFolio") %>%
Corrector.nombre(colnames(tmp.viajes), "idviaje", "IDViaje") %>%
Corrector.nombre(colnames(tmp.viajes), "Factor", "Factor_Viaje", exact.match = T)
tmp.viajes <- subset(tmp.viajes, select = c("IDFolio", "IDPersona", "TiempoViaje", "Factor_Viaje"))
tmp.viajes <- as.data.frame(fread(files.viajes[4], sep = ";", header = T))
# Almacenar los nombres de las columnas.
column_names <- colnames(tmp.viajes)
# Identificar la columna de Tiempos de Viaje / Duración Viaje
t_viajes_colname <- grep("Tiempo", column_names, ignore.case = T)
t_viajes_data <- tmp.viajes[,t_viajes_colname]
# Si los tiempos de viaje están en formato "YMD HMS", corregir
if (nchar(t_viajes_data[1]) == 18){
t_viajes_data <- strptime(t_viajes_data, format = "%d-%m-%Y %H:%M:%S")
t_viajes_data <- format(t_viajes_data,"%H:%M:%S")
}
# Transformar las unidades de tiempo de char a tiempo
tmp.viajes[,t_viajes_colname] <- chron(times= t_viajes_data)
# Estandarizar nombres
tmp.viajes <- Corrector.nombre(tmp.viajes, colnames(tmp.viajes), "tiempo", "TiempoViaje") %>%
Corrector.nombre(colnames(tmp.viajes), "persona", "IDPersona") %>%
Corrector.nombre(colnames(tmp.viajes), "folio", "IDFolio") %>%
Corrector.nombre(colnames(tmp.viajes), "idviaje", "IDViaje") %>%
Corrector.nombre(colnames(tmp.viajes), "Factor", "Factor_Viaje", exact.match = T)
tmp.viajes <- subset(tmp.viajes, select = c("IDFolio", "IDViaje", "IDPersona", "TiempoViaje", "Factor_Viaje"))
tmp.viajes
tmp.viaje$Factor_Viaje
tmp.viajes$Factor_Viaje
rm(list=ls())
# Script to calculate the total ratio of travel means to work vs total travels to work.
# It uses data from the Encuesta Origen-Destino published by SECTRA (Subsecretaria de Transporte)
# Study cities are Coquimbo, Copiapó, Temuco, Santiago, Concepción and Valdivia.
# Code written by Rodrigo Villegas. E-Mail: rdgo.villegas@gmail.com
# Loading libraries and setting working directory
library(data.table); library(dplyr); library(chron)
#setwd("E:/Cedeus Sustainability Indicators/Datos/EOD")
setwd("C:/Users/Rodrigo Villegas/Documents/Cedeus_ISCh/Cedeus_ISCh/15. Tiempos de viaje/")
# funciones de ayuda
# Corrector.nombre:
#   Input: nombres de columna, data.frame, variable a buscar (persona, tiempo, etc...)
#          variable a cambiar (IDPersona, TiempoViajes, etc)
#   Output: Dataset con nombre de variable cambiado.
# Nota: Acepta sólo una variable.
Corrector.nombre <- function(dataset, nombres, variable.buscar, variable.cambiar, exact.match = F){
if (exact.match == T){
colname <- grep(paste("^", variable.buscar, "$", sep = ""), nombres, ignore.case = T)
} else {
colname <- grep(variable.buscar, nombres, ignore.case = T)
}
if (colnames(dataset)[colname] != variable.cambiar){
colnames(dataset)[colname] <- variable.cambiar
}
return(dataset)
}
# Attempt to clean data
setwd("Raw Data/")
files.viajes <- list.files(pattern = "viajes")
tmp.viajes <- as.data.frame(fread(files.viajes[4], sep = ";", header = T))
# Almacenar los nombres de las columnas.
column_names <- colnames(tmp.viajes)
# Identificar la columna de Tiempos de Viaje / Duración Viaje
t_viajes_colname <- grep("Tiempo", column_names, ignore.case = T)
t_viajes_data <- tmp.viajes[,t_viajes_colname]
# Si los tiempos de viaje están en formato "YMD HMS", corregir
if (nchar(t_viajes_data[1]) == 18){
t_viajes_data <- strptime(t_viajes_data, format = "%d-%m-%Y %H:%M:%S")
t_viajes_data <- format(t_viajes_data,"%H:%M:%S")
}
# Transformar las unidades de tiempo de char a tiempo
tmp.viajes[,t_viajes_colname] <- chron(times= t_viajes_data)
# Estandarizar nombres
tmp.viajes <- Corrector.nombre(tmp.viajes, colnames(tmp.viajes), "tiempo", "TiempoViaje") %>%
Corrector.nombre(colnames(tmp.viajes), "persona", "IDPersona") %>%
Corrector.nombre(colnames(tmp.viajes), "folio", "IDFolio") %>%
Corrector.nombre(colnames(tmp.viajes), "idviaje", "IDViaje") %>%
Corrector.nombre(colnames(tmp.viajes), "Factor", "Factor_Viaje", exact.match = T)
if (class(tmp.viajes$Factor_Viaje) == "numeric"){
tmp.viajes$Factor_Viaje <- as.numeric(gsub(pattern = ",",replacement = ".", x = temuco$Factor))
}
tmp.viajes <- subset(tmp.viajes, select = c("IDFolio", "IDViaje", "IDPersona", "TiempoViaje", "Factor_Viaje"))
files.personas <- list.files(pattern = "personas")
tmp.personas <- as.data.frame(fread(files.personas[1], sep = ";", header = T))
View(tmp.personas)
tmp.personas <- as.data.frame(fread(files.personas[1], sep = ";", header = T))
tmp.personas <- Corrector.nombre(tmp.personas, colnames(tmp.personas), "persona", "IDPersona") %>%
Corrector.nombre(colnames(tmp.personas), "folio", "IDFolio") %>%
Corrector.nombre(colnames(tmp.personas), "factor", "Factor_Persona") %>%
#### Temuco ####
# Reading Temuco EOD
temuco <- as.data.frame(fread("Temuco_viajes.csv", sep=";", header= T))
tmp.personas <- Corrector.nombre(tmp.personas, colnames(tmp.personas), "persona", "IDPersona") %>%
Corrector.nombre(colnames(tmp.personas), "folio", "IDFolio") %>%
Corrector.nombre(colnames(tmp.personas), "factor", "Factor_Persona") %>%
#### Temuco ####
# Reading Temuco EOD
temuco <- as.data.frame(fread("Temuco_viajes.csv", sep=";", header= T))
tmp.personas <- Corrector.nombre(tmp.personas, colnames(tmp.personas), "persona", "IDPersona") %>%
Corrector.nombre(colnames(tmp.personas), "folio", "IDFolio") %>%
Corrector.nombre(colnames(tmp.personas), "factor", "Factor_Persona")
colnames(tmp.personas)
files.personas <- list.files(pattern = "personas")
tmp.personas <- as.data.frame(fread(files.personas[1], sep = ";", header = T))
tmp.personas <- Corrector.nombre(tmp.personas, colnames(tmp.personas), "persona", "IDPersona") %>%
Corrector.nombre(colnames(tmp.personas), "folio", "IDFolio") %>%
Corrector.nombre(colnames(tmp.personas), "factor", "Factor_Persona") %>%
subset(select = c("IDFolio", "IDPersona", "Factor_Persona"))
files.viajes <- list.files(pattern = "viajes")
tmp.viajes <- as.data.frame(fread(files.viajes[4], sep = ";", header = T))
setwd("Raw Data/")
files.viajes <- list.files(pattern = "viajes")
tmp.viajes <- as.data.frame(fread(files.viajes[1], sep = ";", header = T))
column_names <- colnames(tmp.viajes)
t_viajes_colname <- grep("Tiempo", column_names, ignore.case = T)
t_viajes_data <- tmp.viajes[,t_viajes_colname]
if (nchar(t_viajes_data[1]) == 18){
t_viajes_data <- strptime(t_viajes_data, format = "%d-%m-%Y %H:%M:%S")
t_viajes_data <- format(t_viajes_data,"%H:%M:%S")
}
tmp.viajes[,t_viajes_colname] <- chron(times= t_viajes_data)
tmp.viajes <- Corrector.nombre(tmp.viajes, colnames(tmp.viajes), "tiempo", "TiempoViaje") %>%
Corrector.nombre(colnames(tmp.viajes), "persona", "IDPersona") %>%
Corrector.nombre(colnames(tmp.viajes), "folio", "IDFolio") %>%
Corrector.nombre(colnames(tmp.viajes), "idviaje", "IDViaje") %>%
Corrector.nombre(colnames(tmp.viajes), "Factor", "Factor_Viaje", exact.match = T) %>%
subset(select = c("IDFolio",  "IDPersona", "IDViaje", "TiempoViaje", "Factor_Viaje"))
if (class(tmp.viajes$Factor_Viaje) == "numeric"){
tmp.viajes$Factor_Viaje <- as.numeric(gsub(pattern = ",",replacement = ".", x = tmp.viajes$Factor_Viaje))
}
files.personas <- list.files(pattern = "personas")
tmp.personas <- as.data.frame(fread(files.personas[1], sep = ";", header = T))
tmp.personas <- Corrector.nombre(tmp.personas, colnames(tmp.personas), "persona", "IDPersona") %>%
Corrector.nombre(colnames(tmp.personas), "folio", "IDFolio") %>%
Corrector.nombre(colnames(tmp.personas), "factor", "Factor_Persona") %>%
subset(select = c("IDFolio", "IDPersona", "Factor_Persona"))
if (class(tmp.personas$Factor_Persona) == "numeric"){
tmp.personas$Factor_Persona <- as.numeric(gsub(pattern = ",",replacement = ".", x = tmp.personas$Factor_Persona))
}
if (class(tmp.personas$Factor_Persona) == "numeric"){
tmp.personas$Factor_Persona <- as.numeric(gsub(pattern = ",",replacement = ".", x = tmp.personas$Factor_Persona))
}
if (class(tmp.viajes$Factor_Viaje) != "numeric"){
tmp.viajes$Factor_Viaje <- as.numeric(gsub(pattern = ",",replacement = ".", x = tmp.viajes$Factor_Viaje))
}
if (class(tmp.personas$Factor_Persona) != "numeric"){
tmp.personas$Factor_Persona <- as.numeric(gsub(pattern = ",",replacement = ".", x = tmp.personas$Factor_Persona))
}
tmp.personas$Factor_Persona <- as.numeric(gsub(pattern = ",",replacement = ".", x = tmp.personas$Factor_Persona))
class(tmp.personas$Factor_Persona)
sum(tmp.personas$Factor_Persona)
tmp <- merge(tmp.personas, tmp.viajes, by = c("IDFolio", "IDPersona"))
View(tmp)
?merge
tmp.summary <- tmp %>%
group_by(IDFolio, IDPersona, IDViaje) %>%
summarise(TiempoViaje.tmp = sum((as.numeric(TiempoViaje)*(24*60*60)*365*Factor_Viaje))
, Factor_Persona = mean(Factor_Persona))
View(tmp.summary)
tmp.summary <- tmp %>%
group_by(IDFolio, IDPersona, IDViaje) %>%
summarise(TiempoViaje.tmp = sum((as.numeric(TiempoViaje)*(24*60*60)*365*Factor_Viaje))
, Factor_Persona = mean(Factor_Persona)) %>%
ungroup() %>%
summarise(Promedio_Anual_Tiempo_Viaje = sum(TiempoViaje.tmp)/(sum(Factor_Persona)))
tmp.summary
, Factor_Persona = mean(Factor_Persona)) %>%
ungroup() %>%
summarise(Promedio_Anual_Tiempo_Viaje = round(seconds_to_period(sum(TiempoViaje.tmp)/(sum(Factor_Persona)))))
install.packages("lubridate")
library(lubridate)
tmp.summary <- tmp %>%
group_by(IDFolio, IDPersona, IDViaje) %>%
summarise(TiempoViaje.tmp = sum((as.numeric(TiempoViaje)*(24*60*60)*365*Factor_Viaje))
, Factor_Persona = mean(Factor_Persona)) %>%
ungroup() %>%
summarise(Promedio_Anual_Tiempo_Viaje = round(seconds_to_period(sum(TiempoViaje.tmp)/(sum(Factor_Persona)))))
tmp.summary
files.modo <- list.files(pattern = "modo")
files.modo <- list.files(pattern = "Modo")
files.modo
c <- 4
tmp.viajes <- as.data.frame(fread(files.viajes[c], sep = ";", header = T))
files.viajes <- list.files(pattern = "viajes")
files.personas <- list.files(pattern = "personas")
files.personas
files.personas <- list.files(pattern = "personas")
files.personas
files.personas <- list.files(pattern = "personas")
files.personas
files.viajes <- list.files(pattern = "viajes")
files.personas <- list.files(pattern = "personas")
tmp.viajes <- as.data.frame(fread(files.viajes[c], sep = ";", header = T))
column_names <- colnames(tmp.viajes)
c
column_names <- colnames(tmp.viajes)
t_viajes_colname <- grep("Tiempo", column_names, ignore.case = T)
t_viajes_data <- tmp.viajes[,t_viajes_colname]
if (nchar(t_viajes_data[1]) == 18){
t_viajes_data <- strptime(t_viajes_data, format = "%d-%m-%Y %H:%M:%S")
t_viajes_data <- format(t_viajes_data,"%H:%M:%S")
}
tmp.viajes[,t_viajes_colname] <- chron(times= t_viajes_data)
tmp.viajes <- Corrector.nombre(tmp.viajes, colnames(tmp.viajes), "tiempo", "TiempoViaje") %>%
Corrector.nombre(colnames(tmp.viajes), "persona", "IDPersona") %>%
Corrector.nombre(colnames(tmp.viajes), "folio", "IDFolio") %>%
Corrector.nombre(colnames(tmp.viajes), "idviaje", "IDViaje") %>%
Corrector.nombre(colnames(tmp.viajes), "Factor", "Factor_Viaje", exact.match = T) %>%
subset(select = c("IDFolio",  "IDPersona", "IDViaje", "TiempoViaje", "Factor_Viaje"))
if (class(tmp.viajes$Factor_Viaje) != "numeric"){
tmp.viajes$Factor_Viaje <- as.numeric(gsub(pattern = ",",replacement = ".", x = tmp.viajes$Factor_Viaje))
}
tmp.personas <- as.data.frame(fread(files.personas[c], sep = ";", header = T))
tmp.personas <- Corrector.nombre(tmp.personas, colnames(tmp.personas), "persona", "IDPersona") %>%
Corrector.nombre(colnames(tmp.personas), "folio", "IDFolio") %>%
Corrector.nombre(colnames(tmp.personas), "factor", "Factor_Persona") %>%
subset(select = c("IDFolio", "IDPersona", "Factor_Persona"))
if (class(tmp.personas$Factor_Persona) != "numeric"){
tmp.personas$Factor_Persona <- as.numeric(gsub(pattern = ",",replacement = ".", x = tmp.personas$Factor_Persona))
}
tmp <- merge(tmp.personas, tmp.viajes, by = c("IDFolio", "IDPersona"))
tmp.summary.total <- tmp %>%
group_by(IDFolio, IDPersona, IDViaje) %>%
summarise(TiempoViaje.tmp = sum((as.numeric(TiempoViaje)*(24*60*60)*365*Factor_Viaje))
, Factor_Persona = mean(Factor_Persona)) %>%
ungroup() %>%
summarise(Promedio_Anual_Tiempo_Viaje = round(seconds_to_period(sum(TiempoViaje.tmp)/(sum(Factor_Persona)))))
tmp.summary.total
c <- 1
tmp.viajes <- as.data.frame(fread(files.viajes[c], sep = ";", header = T))
# Almacenar los nombres de las columnas.
column_names <- colnames(tmp.viajes)
# Identificar la columna de Tiempos de Viaje / Duración Viaje
t_viajes_colname <- grep("Tiempo", column_names, ignore.case = T)
t_viajes_data <- tmp.viajes[,t_viajes_colname]
# Si los tiempos de viaje están en formato "YMD HMS", corregir
if (nchar(t_viajes_data[1]) == 18){
t_viajes_data <- strptime(t_viajes_data, format = "%d-%m-%Y %H:%M:%S")
t_viajes_data <- format(t_viajes_data,"%H:%M:%S")
}
# Transformar las unidades de tiempo de char a tiempo
tmp.viajes[,t_viajes_colname] <- chron(times= t_viajes_data)
# Estandarizar nombres
tmp.viajes <- Corrector.nombre(tmp.viajes, colnames(tmp.viajes), "tiempo", "TiempoViaje") %>%
Corrector.nombre(colnames(tmp.viajes), "persona", "IDPersona") %>%
Corrector.nombre(colnames(tmp.viajes), "folio", "IDFolio") %>%
Corrector.nombre(colnames(tmp.viajes), "idviaje", "IDViaje") %>%
Corrector.nombre(colnames(tmp.viajes), "Factor", "Factor_Viaje", exact.match = T) %>%
subset(select = c("IDFolio",  "IDPersona", "IDViaje", "TiempoViaje", "Factor_Viaje"))
if (class(tmp.viajes$Factor_Viaje) != "numeric"){
tmp.viajes$Factor_Viaje <- as.numeric(gsub(pattern = ",",replacement = ".", x = tmp.viajes$Factor_Viaje))
}
# Importar tabla con población
tmp.personas <- as.data.frame(fread(files.personas[c], sep = ";", header = T))
tmp.personas <- Corrector.nombre(tmp.personas, colnames(tmp.personas), "persona", "IDPersona") %>%
Corrector.nombre(colnames(tmp.personas), "folio", "IDFolio") %>%
Corrector.nombre(colnames(tmp.personas), "factor", "Factor_Persona") %>%
subset(select = c("IDFolio", "IDPersona", "Factor_Persona"))
if (class(tmp.personas$Factor_Persona) != "numeric"){
tmp.personas$Factor_Persona <- as.numeric(gsub(pattern = ",",replacement = ".", x = tmp.personas$Factor_Persona))
}
tmp <- merge(tmp.personas, tmp.viajes, by = c("IDFolio", "IDPersona"))
tmp.summary.total <- tmp %>%
group_by(IDFolio, IDPersona, IDViaje) %>%
summarise(TiempoViaje.tmp = sum((as.numeric(TiempoViaje)*(24*60*60)*365*Factor_Viaje))
, Factor_Persona = mean(Factor_Persona)) %>%
ungroup() %>%
summarise(Promedio_Anual_Tiempo_Viaje = round(seconds_to_period(sum(TiempoViaje.tmp)/(sum(Factor_Persona)))))
tmp.summary.total
c <- 2
tmp.viajes <- as.data.frame(fread(files.viajes[c], sep = ";", header = T))
# Almacenar los nombres de las columnas.
column_names <- colnames(tmp.viajes)
# Identificar la columna de Tiempos de Viaje / Duración Viaje
t_viajes_colname <- grep("Tiempo", column_names, ignore.case = T)
t_viajes_data <- tmp.viajes[,t_viajes_colname]
# Si los tiempos de viaje están en formato "YMD HMS", corregir
if (nchar(t_viajes_data[1]) == 18){
t_viajes_data <- strptime(t_viajes_data, format = "%d-%m-%Y %H:%M:%S")
t_viajes_data <- format(t_viajes_data,"%H:%M:%S")
}
# Transformar las unidades de tiempo de char a tiempo
tmp.viajes[,t_viajes_colname] <- chron(times= t_viajes_data)
# Estandarizar nombres
tmp.viajes <- Corrector.nombre(tmp.viajes, colnames(tmp.viajes), "tiempo", "TiempoViaje") %>%
Corrector.nombre(colnames(tmp.viajes), "persona", "IDPersona") %>%
Corrector.nombre(colnames(tmp.viajes), "folio", "IDFolio") %>%
Corrector.nombre(colnames(tmp.viajes), "idviaje", "IDViaje") %>%
Corrector.nombre(colnames(tmp.viajes), "Factor", "Factor_Viaje", exact.match = T) %>%
subset(select = c("IDFolio",  "IDPersona", "IDViaje", "TiempoViaje", "Factor_Viaje"))
if (class(tmp.viajes$Factor_Viaje) != "numeric"){
tmp.viajes$Factor_Viaje <- as.numeric(gsub(pattern = ",",replacement = ".", x = tmp.viajes$Factor_Viaje))
}
# Importar tabla con población
tmp.personas <- as.data.frame(fread(files.personas[c], sep = ";", header = T))
tmp.personas <- Corrector.nombre(tmp.personas, colnames(tmp.personas), "persona", "IDPersona") %>%
Corrector.nombre(colnames(tmp.personas), "folio", "IDFolio") %>%
Corrector.nombre(colnames(tmp.personas), "factor", "Factor_Persona") %>%
subset(select = c("IDFolio", "IDPersona", "Factor_Persona"))
if (class(tmp.personas$Factor_Persona) != "numeric"){
tmp.personas$Factor_Persona <- as.numeric(gsub(pattern = ",",replacement = ".", x = tmp.personas$Factor_Persona))
}
tmp <- merge(tmp.personas, tmp.viajes, by = c("IDFolio", "IDPersona"))
tmp.summary.total <- tmp %>%
group_by(IDFolio, IDPersona, IDViaje) %>%
summarise(TiempoViaje.tmp = sum((as.numeric(TiempoViaje)*(24*60*60)*365*Factor_Viaje))
, Factor_Persona = mean(Factor_Persona)) %>%
ungroup() %>%
summarise(Promedio_Anual_Tiempo_Viaje = round(seconds_to_period(sum(TiempoViaje.tmp)/(sum(Factor_Persona)))))
tmp.summary.total
c <- 3
tmp.viajes <- as.data.frame(fread(files.viajes[c], sep = ";", header = T))
# Almacenar los nombres de las columnas.
column_names <- colnames(tmp.viajes)
# Identificar la columna de Tiempos de Viaje / Duración Viaje
t_viajes_colname <- grep("Tiempo", column_names, ignore.case = T)
t_viajes_data <- tmp.viajes[,t_viajes_colname]
# Si los tiempos de viaje están en formato "YMD HMS", corregir
if (nchar(t_viajes_data[1]) == 18){
t_viajes_data <- strptime(t_viajes_data, format = "%d-%m-%Y %H:%M:%S")
t_viajes_data <- format(t_viajes_data,"%H:%M:%S")
}
# Transformar las unidades de tiempo de char a tiempo
tmp.viajes[,t_viajes_colname] <- chron(times= t_viajes_data)
# Estandarizar nombres
tmp.viajes <- Corrector.nombre(tmp.viajes, colnames(tmp.viajes), "tiempo", "TiempoViaje") %>%
Corrector.nombre(colnames(tmp.viajes), "persona", "IDPersona") %>%
Corrector.nombre(colnames(tmp.viajes), "folio", "IDFolio") %>%
Corrector.nombre(colnames(tmp.viajes), "idviaje", "IDViaje") %>%
Corrector.nombre(colnames(tmp.viajes), "Factor", "Factor_Viaje", exact.match = T) %>%
subset(select = c("IDFolio",  "IDPersona", "IDViaje", "TiempoViaje", "Factor_Viaje"))
if (class(tmp.viajes$Factor_Viaje) != "numeric"){
tmp.viajes$Factor_Viaje <- as.numeric(gsub(pattern = ",",replacement = ".", x = tmp.viajes$Factor_Viaje))
}
# Importar tabla con población
tmp.personas <- as.data.frame(fread(files.personas[c], sep = ";", header = T))
tmp.personas <- Corrector.nombre(tmp.personas, colnames(tmp.personas), "persona", "IDPersona") %>%
Corrector.nombre(colnames(tmp.personas), "folio", "IDFolio") %>%
Corrector.nombre(colnames(tmp.personas), "factor", "Factor_Persona") %>%
subset(select = c("IDFolio", "IDPersona", "Factor_Persona"))
if (class(tmp.personas$Factor_Persona) != "numeric"){
tmp.personas$Factor_Persona <- as.numeric(gsub(pattern = ",",replacement = ".", x = tmp.personas$Factor_Persona))
}
tmp <- merge(tmp.personas, tmp.viajes, by = c("IDFolio", "IDPersona"))
tmp.summary.total <- tmp %>%
group_by(IDFolio, IDPersona, IDViaje) %>%
summarise(TiempoViaje.tmp = sum((as.numeric(TiempoViaje)*(24*60*60)*365*Factor_Viaje))
, Factor_Persona = mean(Factor_Persona)) %>%
ungroup() %>%
summarise(Promedio_Anual_Tiempo_Viaje = round(seconds_to_period(sum(TiempoViaje.tmp)/(sum(Factor_Persona)))))
tmp.viajes <- as.data.frame(fread(files.viajes[c], sep = ";", header = T))
files.viajes[c]
c <- 5
tmp.viajes <- as.data.frame(fread(files.viajes[c], sep = ";", header = T))
# Almacenar los nombres de las columnas.
column_names <- colnames(tmp.viajes)
# Identificar la columna de Tiempos de Viaje / Duración Viaje
t_viajes_colname <- grep("Tiempo", column_names, ignore.case = T)
t_viajes_data <- tmp.viajes[,t_viajes_colname]
# Si los tiempos de viaje están en formato "YMD HMS", corregir
if (nchar(t_viajes_data[1]) == 18){
t_viajes_data <- strptime(t_viajes_data, format = "%d-%m-%Y %H:%M:%S")
t_viajes_data <- format(t_viajes_data,"%H:%M:%S")
}
# Transformar las unidades de tiempo de char a tiempo
tmp.viajes[,t_viajes_colname] <- chron(times= t_viajes_data)
# Estandarizar nombres
tmp.viajes <- Corrector.nombre(tmp.viajes, colnames(tmp.viajes), "tiempo", "TiempoViaje") %>%
Corrector.nombre(colnames(tmp.viajes), "persona", "IDPersona") %>%
Corrector.nombre(colnames(tmp.viajes), "folio", "IDFolio") %>%
Corrector.nombre(colnames(tmp.viajes), "idviaje", "IDViaje") %>%
Corrector.nombre(colnames(tmp.viajes), "Factor", "Factor_Viaje", exact.match = T) %>%
subset(select = c("IDFolio",  "IDPersona", "IDViaje", "TiempoViaje", "Factor_Viaje"))
if (class(tmp.viajes$Factor_Viaje) != "numeric"){
tmp.viajes$Factor_Viaje <- as.numeric(gsub(pattern = ",",replacement = ".", x = tmp.viajes$Factor_Viaje))
}
# Importar tabla con población
tmp.personas <- as.data.frame(fread(files.personas[c], sep = ";", header = T))
tmp.personas <- Corrector.nombre(tmp.personas, colnames(tmp.personas), "persona", "IDPersona") %>%
Corrector.nombre(colnames(tmp.personas), "folio", "IDFolio") %>%
Corrector.nombre(colnames(tmp.personas), "factor", "Factor_Persona") %>%
subset(select = c("IDFolio", "IDPersona", "Factor_Persona"))
if (class(tmp.personas$Factor_Persona) != "numeric"){
tmp.personas$Factor_Persona <- as.numeric(gsub(pattern = ",",replacement = ".", x = tmp.personas$Factor_Persona))
}
tmp <- merge(tmp.personas, tmp.viajes, by = c("IDFolio", "IDPersona"))
tmp.summary.total <- tmp %>%
group_by(IDFolio, IDPersona, IDViaje) %>%
summarise(TiempoViaje.tmp = sum((as.numeric(TiempoViaje)*(24*60*60)*365*Factor_Viaje))
, Factor_Persona = mean(Factor_Persona)) %>%
ungroup() %>%
summarise(Promedio_Anual_Tiempo_Viaje = round(seconds_to_period(sum(TiempoViaje.tmp)/(sum(Factor_Persona)))))
tmp.summary.total
c <- 3
tmp.viajes <- as.data.frame(fread(files.viajes[c], sep = ";", header = T))
View(tmp.viajes)
grepl("Santiago", files.viajes[c])
1:files.viajes
1:length(files.viajes)
seq(files.viajes)
total.ciudad <- data.frame()
for (c in seq(files.viajes)){
tmp.viajes <- as.data.frame(fread(files.viajes[c], sep = ";", header = T))
tmp.personas <- as.data.frame(fread(files.personas[c], sep = ";", header = T))
if (grepl("Santiago", files.viajes[c])){
next()
}
# Almacenar los nombres de las columnas.
column_names <- colnames(tmp.viajes)
# Identificar la columna de Tiempos de Viaje / Duración Viaje
t_viajes_colname <- grep("Tiempo", column_names, ignore.case = T)
t_viajes_data <- tmp.viajes[,t_viajes_colname]
# Si los tiempos de viaje están en formato "YMD HMS", corregir
if (nchar(t_viajes_data[1]) == 18){
t_viajes_data <- strptime(t_viajes_data, format = "%d-%m-%Y %H:%M:%S")
t_viajes_data <- format(t_viajes_data,"%H:%M:%S")
}
# Transformar las unidades de tiempo de char a tiempo
tmp.viajes[,t_viajes_colname] <- chron(times= t_viajes_data)
# Estandarizar nombres
tmp.viajes <- Corrector.nombre(tmp.viajes, colnames(tmp.viajes), "tiempo", "TiempoViaje") %>%
Corrector.nombre(colnames(tmp.viajes), "persona", "IDPersona") %>%
Corrector.nombre(colnames(tmp.viajes), "folio", "IDFolio") %>%
Corrector.nombre(colnames(tmp.viajes), "idviaje", "IDViaje") %>%
Corrector.nombre(colnames(tmp.viajes), "Factor", "Factor_Viaje", exact.match = T) %>%
subset(select = c("IDFolio",  "IDPersona", "IDViaje", "TiempoViaje", "Factor_Viaje"))
if (class(tmp.viajes$Factor_Viaje) != "numeric"){
tmp.viajes$Factor_Viaje <- as.numeric(gsub(pattern = ",",replacement = ".", x = tmp.viajes$Factor_Viaje))
}
# Importar tabla con población
tmp.personas <- Corrector.nombre(tmp.personas, colnames(tmp.personas), "persona", "IDPersona") %>%
Corrector.nombre(colnames(tmp.personas), "folio", "IDFolio") %>%
Corrector.nombre(colnames(tmp.personas), "factor", "Factor_Persona") %>%
subset(select = c("IDFolio", "IDPersona", "Factor_Persona"))
if (class(tmp.personas$Factor_Persona) != "numeric"){
tmp.personas$Factor_Persona <- as.numeric(gsub(pattern = ",",replacement = ".", x = tmp.personas$Factor_Persona))
}
tmp <- merge(tmp.personas, tmp.viajes, by = c("IDFolio", "IDPersona"))
tmp.summary.total <- tmp %>%
group_by(IDFolio, IDPersona, IDViaje) %>%
summarise(TiempoViaje.tmp = sum((as.numeric(TiempoViaje)*(24*60*60)*365*Factor_Viaje))
, Factor_Persona = mean(Factor_Persona)) %>%
ungroup() %>%
summarise(Promedio_Anual_Tiempo_Viaje = round(seconds_to_period(sum(TiempoViaje.tmp)/(sum(Factor_Persona)))))
total.ciudad <- rbind(total.ciudad, tmp.summary.total)
}
total.ciudad
files.list
setwd("../")
ciudades <- read.csv("Otros/Ciudades_Cedeus.csv")
View(tmp)
View(ciudades)
ciudades <- read.csv("Otros/Ciudades_Cedeus.csv") %>%
select(Ciudad)
ciudades <- read.csv("Otros/Ciudades_Cedeus.csv") %>%
select(unique(Ciudad))
ciudades <- read.csv("Otros/Ciudades_Cedeus.csv") %>%
select(unique(Ciudad))
ciudades <- read.csv("Otros/Ciudades_Cedeus.csv") %>%
unique(Ciudad)
ciudades <- read.csv("Otros/Ciudades_Cedeus.csv") %>%
unique(ciudad)
ciudades <- read.csv("Otros/Ciudades_Cedeus.csv") %>%
unique(ciudad)
ciudades <- read.csv("Otros/Ciudades_Cedeus.csv") %>%
unique(ciudades$Ciudad)
ciudades <- read.csv("Otros/Ciudades_Cedeus.csv")
ciudades <- unique(ciudades$Ciudad)
ciudades
c
files.personas[c]
ciudades %in% files.personas[c]
sub( " .*$", "", files.viajes )
sub( "_.*$", "", files.viajes )
files.viajes
rm(list=ls())
