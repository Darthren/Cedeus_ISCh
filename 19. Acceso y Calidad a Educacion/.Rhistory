-5--12
3--4
sin(40)
sin(40)*8
cos(40)*8
sin(80)*6
cos(80)*6
8*cos(320)+6*cos(100)
(8*cos(320))+(6*cos(100))
6*cos(100)
cos(100)
8*cos(320)
?cos
8*cos(320*pi/120)
o <- pi/120
8*cos(320*o)
8cos(30)
8*cos(320*o)
8*cos(320*o)+6*cos(100*o)
(8*cos(320*o))+(6*cos(100*o))
6*cos(100*pi/120)
6*cos(100*o)
6*sin(100*o)
o <- pi/180
(8*cos(320*o))+(6*cos(100*o))
8*sin(320*o)+6*sin(100*o)
8*sin(40*o)+6*sin(10*o)
100+90
90+80
+10
8*sin(40*o)+6*sin(80*o)
magnitude <- function(a,b, aa, ab, operation){
if (operation == "-"){
v <- a*sin(aa*o) - b*sin(ab*o)
} else if (operation == "+"){
w <- a*cos(aa*o) + b*cos(ab*o)
}
return(c(v,w))
}
magnitude(5,8,170,300,"+")
if (operation == "-"){
v <- a*sin(aa*o) - b*sin(ab*o)
w <- a*cos(aa*o) - b*cos(ab*o)
} else if (operation == "+"){
w <- a*cos(aa*o) + b*cos(ab*o)
v <- a*sin(aa*o) - b*sin(ab*o)
}
o <- pi/180
magnitude <- function(a,b, aa, ab, operation){
if (operation == "-"){
v <- a*sin(aa*o) - b*sin(ab*o)
w <- a*cos(aa*o) - b*cos(ab*o)
} else if (operation == "+"){
w <- a*cos(aa*o) + b*cos(ab*o)
v <- a*sin(aa*o) - b*sin(ab*o)
}
return(c(v,w))
}
magnitude(5,8,170,300,"+")
magnitude <- function(a,b, aa, ab, operation){
if (operation == "-"){
v <- a*cos(aa*o) - b*cos(ab*o)
w <- a*sin(aa*o) - b*sin(ab*o)
} else if (operation == "+"){
v <- a*cos(aa*o) + b*cos(ab*o)
w <- a*sin(aa*o) - b*sin(ab*o)
}
return(c(v,w))
}
magnitude(5,8,170,300,"+")
5*sin(170*o) + 8*sin(300*o)
a <- 5
b <- 8
ab <- 170
ab <- 300
aa <- 170
o <- pi/180
magnitude <- function(a,b, aa, ab, operation){
if (operation == "-"){
v <- a*cos(aa*o) - b*cos(ab*o)
w <- a*sin(aa*o) - b*sin(ab*o)
} else if (operation == "+"){
v <- a*cos(aa*o) + b*cos(ab*o)
w <- a*sin(aa*o) + b*sin(ab*o)
}
return(c(v,w))
}
magnitude(5,8,170,300)
magnitude(5,8,170,300, "+")
magnitude(8,5,30,160,"+")
magnitude(7,5,100,290)
magnitude(7,5,100,290, "+")
magnitude(5,70,6,160,"+")
magnitude(5,6,70,160,"+")
?setClass
install.packages("tm")
walkshed.text.carpeta <- "GIS/Walksheds GeoJSON_B/"
centroides.carpeta <- "GIS/EE_coords/"
walkshed.shp.carpeta <- "GIS/Walksheds (Manzanas)/UnDissolved"
centroides <- read.csv(paste(centroides.carpeta, "Coords_Educacion.csv", sep = ""))
ciudades <- unique(centroides$Ciudad)
centroides <- read.csv(paste(centroides.carpeta, "Coords_Educacion.csv", sep = ""))
centroides <- read.csv(paste(centroides.carpeta, "Coords_Educacion.csv", sep = ""))
walkshed.text.carpeta <- "GIS/Walksheds GeoJSON_B/"
centroides.carpeta <- "GIS/EE_coords/"
walkshed.shp.carpeta <- "GIS/Walksheds (Manzanas)/UnDissolved"
centroides <- read.csv(paste(centroides.carpeta, "Coords_Educacion.csv", sep = ""))
conversor_OTP
Sys.Date()-1
6.5+5+40
6.5+5
# Script to calculate the total ratio of travel means to work vs total travels to work.
# It uses data from the Encuesta Origen-Destino published by SECTRA (Subsecretaria de Transporte)
# Study cities are Coquimbo, Copiapó, Temuco, Santiago, Concepción and Valdivia.
# Code written by Rodrigo Villegas. E-Mail: rdgo.villegas@gmail.com
# Loading libraries and setting working directory
# TODO: Incluir validación de viajes
library(data.table); library(dplyr); library(chron); library(lubridate)
#setwd("E:/Cedeus Sustainability Indicators/Datos/EOD")
setwd("C:/Users/Rodrigo Villegas/Documents/Cedeus_ISCh/Cedeus_ISCh/15. Tiempos de viaje/")
# funciones de ayuda
# Corrector.nombre:
#   Input: nombres de columna, data.frame, variable a buscar (persona, tiempo, etc...)
#          variable a cambiar (IDPersona, TiempoViajes, etc)
#   Output: Dataset con nombre de variable cambiado.
# Nota: Acepta sólo una variable.
Corrector.nombre <- function(dataset, nombres, variable.buscar, variable.cambiar, exact.match = F){
if (exact.match == T){
colname <- grep(paste("^", variable.buscar, "$", sep = ""), nombres, ignore.case = T)
} else {
colname <- grep(variable.buscar, nombres, ignore.case = T)
}
if (colnames(dataset)[colname] != variable.cambiar){
colnames(dataset)[colname] <- variable.cambiar
}
return(dataset)
}
ciudades <- read.csv("Otros/Ciudades_Cedeus.csv")
ciudades <- unique(ciudades$Ciudad)
# Attempt to clean data
setwd("Raw Data/")
files.viajes <- list.files(pattern = "viajes")
files.personas <- list.files(pattern = "personas")
files.modo <- list.files(pattern = "ModoReclass")
total.ciudad <- data.frame()
modo.ciudad <- data.frame()
for (c in seq(files.viajes)){
tmp.viajes <- as.data.frame(fread(files.viajes[c], sep = ";", header = T))
tmp.personas <- as.data.frame(fread(files.personas[c], sep = ";", header = T))
tmp.modo <- as.data.frame(fread(files.modo[c], sep = ",", header = T))
nombre.ciudad <- sub( "_.*$", "", files.viajes[c])
# Almacenar los nombres de las columnas.
column_names <- colnames(tmp.viajes)
if (grepl("Santiago", files.viajes[c])){
# Unificar los factores
Factores <- paste(tmp.viajes$FactorLaboralNormal)
Factores <- as.numeric(gsub(",", ".", Factores))
tmp.viajes$Factores <- Factores
tmp.viajes <- Corrector.nombre(tmp.viajes, colnames(tmp.viajes), "persona", "IDPersona") %>%
Corrector.nombre(colnames(tmp.viajes), "hogar", "IDFolio") %>%
Corrector.nombre(colnames(tmp.viajes), "viaje", "IDViaje", exact.match = T) %>%
Corrector.nombre(colnames(tmp.viajes), "ModoAgregado", "IDModo") %>%
Corrector.nombre(colnames(tmp.viajes), "LaboralNormal", "Factor_Viaje") %>%
subset(select = c("IDFolio",  "IDPersona", "IDViaje", "TiempoViaje", "Factor_Viaje", "IDModo"))
# El campo $TiempoViaje está en minutos. Multiplicar * 60 para pasar a segundos
# Y convertirlo en tiempo
tmp.viajes$Factor_Viaje <- as.numeric(gsub(pattern = ",",replacement = ".", x = tmp.viajes$Factor_Viaje))
tmp.viajes$TiempoViaje <- chron(times = tmp.viajes$TiempoViaje/(24*60))
tmp.viajes <- tmp.viajes[!is.na(tmp.viajes$TiempoViaje) & !is.na(tmp.viajes$Factor_Viaje),]
# Tabla de personas
tmp.personas <- Corrector.nombre(tmp.personas, colnames(tmp.personas), "persona", "IDPersona") %>%
Corrector.nombre(colnames(tmp.personas), "hogar", "IDFolio") %>%
Corrector.nombre(colnames(tmp.personas), "factor", "Factor_Persona", exact.match =T) %>%
subset(select = c("IDFolio", "IDPersona", "Factor_Persona"))
# Correcciones de formato a la tabla de personas
tmp.personas$Factor_Persona <- as.numeric(gsub(pattern = ",",replacement = ".", x = tmp.personas$Factor_Persona))
tmp.personas$IDFolio <- as.numeric(gsub(pattern = ",",replacement = ".", x = tmp.personas$IDFolio))
tmp.personas$IDPersona <- as.numeric(gsub(pattern = ",",replacement = ".", x = tmp.personas$IDPersona))
# Combinar ambos databases
tmp <- merge(tmp.personas, tmp.viajes, by = c("IDFolio", "IDPersona")) %>%
merge(tmp.modo, by = "IDModo")
# Cuanto tiempo gastan los habitantes de Santiago en transporte al año?
tmp.summary.total <- tmp %>%
group_by(IDPersona) %>%
summarise(TiempoViaje = sum(TiempoViaje*Factor_Viaje, na.rm = T),
Factor_Persona = unique(Factor_Persona)) %>%
ungroup() %>%
summarise(Ciudad = nombre.ciudad,
Promedio.Tiempo.viaje.año = round(seconds_to_period(weighted.mean(TiempoViaje, Factor_Persona)*240*24*3600)),
Promedio.Tiempo.viaje.diario = round(seconds_to_period(weighted.mean(TiempoViaje, Factor_Persona)*24*3600)))
# Añadir el resultado a la tabla total
total.ciudad <- rbind(total.ciudad, tmp.summary.total)
tmp.summary.Modo <- tmp %>%
summarise(Ciudad = nombre.ciudad,
"Bicicleta" = round(seconds_to_period(sum(as.numeric(TiempoViaje[ModoAgregado == "Bicicleta"]*Factor_Viaje[ModoAgregado == "Bicicleta"]))/length(unique(IDPersona[ModoAgregado == "Bicicleta"]))*24*3600)),
"Caminata"  = round(seconds_to_period(sum(as.numeric(TiempoViaje[ModoAgregado == "Caminata"]*Factor_Viaje[ModoAgregado == "Caminata"]))/length(unique(IDPersona[ModoAgregado == "Caminata"]))*24*3600)),
"Transporte Privado/Auto"  = round(seconds_to_period(sum(as.numeric(TiempoViaje[ModoAgregado == "Transporte Privado/Auto"]*Factor_Viaje[ModoAgregado == "Transporte Privado/Auto"]))/length(unique(IDPersona[ModoAgregado == "Transporte Privado/Auto"]))*24*3600)),
"Transporte Publico"  = round(seconds_to_period(sum(as.numeric(TiempoViaje[ModoAgregado == "Transporte Publico"]*Factor_Viaje[ModoAgregado == "Transporte Publico"]))/length(unique(IDPersona[ModoAgregado == "Transporte Publico"]))*24*3600)),
"Otros" = round(seconds_to_period(sum(as.numeric(TiempoViaje[ModoAgregado == "Otros"]*Factor_Viaje[ModoAgregado == "Otros"]))/length(unique(IDPersona[ModoAgregado == "Otros" ]))*24*3600)),
"Promedio" = round(seconds_to_period(sum(as.numeric(TiempoViaje*Factor_Viaje))/length(unique(IDPersona))*24*3600)))
modo.ciudad <- rbind(modo.ciudad, tmp.summary.Modo)
} else if (grepl("Coquimbo", files.viajes[c])){
tmp.viajes <- Corrector.nombre(tmp.viajes, colnames(tmp.viajes), "tiempo", "TiempoViaje") %>%
Corrector.nombre(colnames(tmp.viajes), "persona", "IDPersona") %>%
Corrector.nombre(colnames(tmp.viajes), "folio", "IDFolio") %>%
Corrector.nombre(colnames(tmp.viajes), "idviaje", "IDViaje") %>%
subset(select = c("IDFolio",  "IDPersona", "IDViaje", "TiempoViaje", "IDModo"))
# Si los tiempos de viaje están en formato "YMD HMS", corregir
if (nchar(tmp.viajes$TiempoViaje[1]) == 18){
tmp.viajes$TiempoViaje <- strptime(tmp.viajes$TiempoViaje, format = "%d-%m-%Y %H:%M:%S")
tmp.viajes$TiempoViaje <- format(tmp.viajes$TiempoViaje,"%H:%M:%S")
}
# Transformar las unidades de tiempo de char a tiempo
tmp.viajes$TiempoViaje <- chron(times= tmp.viajes$TiempoViaje)
# Importar tabla con población
tmp.personas <- Corrector.nombre(tmp.personas, colnames(tmp.personas), "persona", "IDPersona") %>%
Corrector.nombre(colnames(tmp.personas), "folio", "IDFolio") %>%
Corrector.nombre(colnames(tmp.personas), "factor", "Factor_Persona") %>%
subset(select = c("IDFolio", "IDPersona", "Factor_Persona"))
if (class(tmp.personas$Factor_Persona) != "numeric"){
tmp.personas$Factor_Persona <- as.numeric(gsub(pattern = ",",replacement = ".", x = tmp.personas$Factor_Persona))
}
# Combinar ambos databases (viajes y personas).
tmp <- merge(tmp.personas, tmp.viajes, by = c("IDFolio", "IDPersona")) %>%
merge(tmp.modo, by = "IDModo")
tmp.summary.total <- tmp %>%
group_by(IDFolio, IDPersona, IDViaje) %>%
summarise(TiempoViaje.tmp = sum((as.numeric(TiempoViaje)*(24*60*60)*240)),
TiempoViajediario.tmp = sum((as.numeric(TiempoViaje)*(24*60*60))),
Factor_Persona = mean(Factor_Persona)) %>%
ungroup() %>%
summarise(Ciudad = nombre.ciudad,
Promedio.Tiempo.viaje.año = round(seconds_to_period(sum(TiempoViaje.tmp)/length(unique(paste(IDFolio, IDPersona, sep = ""))))),
Promedio.Tiempo.viaje.diario = round(seconds_to_period(sum(TiempoViajediario.tmp)/length(unique(paste(IDFolio, IDPersona, sep = ""))))))
total.ciudad <- rbind(total.ciudad, tmp.summary.total)
tmp.summary.Modo <- tmp %>%
summarise(Ciudad = nombre.ciudad,
"Bicicleta" = round((sum((TiempoViaje[ModoAgregado == "Bicicleta"]))/length(unique(IDPersona[ModoAgregado == "Bicicleta"])))),
"Caminata"  = round((sum((TiempoViaje[ModoAgregado == "Caminata"]))/length(unique(IDPersona[ModoAgregado == "Caminata"])))),
"Transporte Privado/Auto"  = round((sum((TiempoViaje[ModoAgregado == "Transporte Privado/Auto"]))/length(unique(IDPersona[ModoAgregado == "Transporte Privado/Auto"])))),
"Transporte Publico"  = round((sum((TiempoViaje[ModoAgregado == "Transporte Publico"]))/length(unique(IDPersona[ModoAgregado == "Transporte Publico"])))),
"Otros" = round((sum((TiempoViaje[ModoAgregado == "Otros"]))/length(unique(IDPersona[ModoAgregado == "Otros" ])))),
"Promedio" =  round((sum((TiempoViaje))/length(unique(IDPersona)))))
modo.ciudad <- rbind(modo.ciudad, tmp.summary.Modo)
} else {
# Estandarizar nombres
tmp.viajes <- Corrector.nombre(tmp.viajes, colnames(tmp.viajes), "tiempo", "TiempoViaje") %>%
Corrector.nombre(colnames(tmp.viajes), "persona", "IDPersona") %>%
Corrector.nombre(colnames(tmp.viajes), "folio", "IDFolio") %>%
Corrector.nombre(colnames(tmp.viajes), "idviaje", "IDViaje") %>%
Corrector.nombre(colnames(tmp.viajes), "Factor", "Factor_Viaje", exact.match = T) %>%
subset(select = c("IDFolio",  "IDPersona", "IDViaje", "TiempoViaje", "Factor_Viaje", "IDModo"))
# Si los tiempos de viaje están en formato "YMD HMS", corregir
if (nchar(tmp.viajes$TiempoViaje[1]) == 18){
tmp.viajes$TiempoViaje <- strptime(tmp.viajes$TiempoViaje, format = "%d-%m-%Y %H:%M:%S")
tmp.viajes$TiempoViaje <- format(tmp.viajes$TiempoViaje,"%H:%M:%S")
}
# Transformar las unidades de tiempo de char a tiempo
tmp.viajes$TiempoViaje <- chron(times= tmp.viajes$TiempoViaje)
if (class(tmp.viajes$Factor_Viaje) != "numeric"){
tmp.viajes$Factor_Viaje <- as.numeric(gsub(pattern = ",",replacement = ".", x = tmp.viajes$Factor_Viaje))
}
# Corregir nombres, en caso de que no estén bien asignados
tmp.personas <- Corrector.nombre(tmp.personas, colnames(tmp.personas), "persona", "IDPersona") %>%
Corrector.nombre(colnames(tmp.personas), "folio", "IDFolio") %>%
Corrector.nombre(colnames(tmp.personas), "factor", "Factor_Persona") %>%
subset(select = c("IDFolio", "IDPersona", "Factor_Persona"))
# Si los factorese están con separación por ",", reemplazar por "."
if (class(tmp.personas$Factor_Persona) != "numeric"){
tmp.personas$Factor_Persona <- as.numeric(gsub(pattern = ",",replacement = ".", x = tmp.personas$Factor_Persona))
}
# Combinar ambos databases (viajes y personas).
tmp <- merge(tmp.personas, tmp.viajes, by = c("IDFolio", "IDPersona")) %>%
merge(tmp.modo, by = "IDModo")
# Asignar ID unico a personas, para posterior análisis
id.personas <- paste(tmp$IDFolio, tmp$IDPersona, sep = "")
tmp$IDPersona <- id.personas
# Cuanto tiempo al año gastan los habitantes de las otras ciudades en transporte?
tmp.summary.total <- tmp %>%
group_by(IDPersona) %>%
summarise(TiempoViaje = sum(TiempoViaje*Factor_Viaje, na.rm = T),
Factor_Persona = unique(Factor_Persona)) %>%
ungroup() %>%
summarise(Ciudad = nombre.ciudad,
Promedio.Tiempo.viaje.año = round(seconds_to_period((sum(TiempoViaje)/sum(Factor_Persona))*240*24*3600)),
Promedio.Tiempo.viaje.diario = round(seconds_to_period((sum(TiempoViaje)/sum(Factor_Persona))*24*3600)))
total.ciudad <- rbind(total.ciudad, tmp.summary.total)
tmp.summary.Modo <- tmp %>%
summarise(Ciudad = nombre.ciudad,
"Bicicleta" = round(seconds_to_period(sum(as.numeric(TiempoViaje[ModoAgregado == "Bicicleta"]*Factor_Viaje[ModoAgregado == "Bicicleta"]))/sum(Factor_Persona[ModoAgregado == "Bicicleta"])*24*3600)),
"Caminata"  = round(seconds_to_period(sum(as.numeric(TiempoViaje[ModoAgregado == "Caminata"]*Factor_Viaje[ModoAgregado == "Caminata"]))/sum(Factor_Persona[ModoAgregado == "Caminata"])*24*3600)),
"Transporte Privado/Auto"  = round(seconds_to_period(sum(as.numeric(TiempoViaje[ModoAgregado == "Transporte Privado/Auto"]*Factor_Viaje[ModoAgregado == "Transporte Privado/Auto"]))/sum(Factor_Persona[ModoAgregado == "Transporte Privado/Auto"])*24*3600)),
"Transporte Publico"  = round(seconds_to_period(sum(as.numeric(TiempoViaje[ModoAgregado == "Transporte Publico"]*Factor_Viaje[ModoAgregado == "Transporte Publico"]))/sum(Factor_Persona[ModoAgregado == "Transporte Publico"])*24*3600)),
"Otros" = round(seconds_to_period(sum(as.numeric(TiempoViaje[ModoAgregado == "Otros"]*Factor_Viaje[ModoAgregado == "Otros"]))/sum(Factor_Persona[ModoAgregado == "Otros" ])*24*3600)),
"Promedio" = round(seconds_to_period(sum(as.numeric(TiempoViaje*Factor_Viaje))/sum(Factor_Persona)*24*3600)))
modo.ciudad <- rbind(modo.ciudad, tmp.summary.Modo)
}
}
print(total.ciudad)
print(modo.ciudad)
View(modo.ciudad)
write.csv(modo.ciudad, "16._Tiempos_de_viaje_(Diario).csv")
tmp.summary.Modo <- tmp %>%
summarise(Ciudad = nombre.ciudad,
"Bicicleta" = round(seconds_to_period(sum(as.numeric(TiempoViaje[ModoAgregado == "Bicicleta"]*Factor_Viaje[ModoAgregado == "Bicicleta"]))/sum(Factor_Persona[ModoAgregado == "Bicicleta"])*24*3600*240)),
"Caminata"  = round(seconds_to_period(sum(as.numeric(TiempoViaje[ModoAgregado == "Caminata"]*Factor_Viaje[ModoAgregado == "Caminata"]))/sum(Factor_Persona[ModoAgregado == "Caminata"])*24*3600*240)),
"Transporte Privado/Auto"  = round(seconds_to_period(sum(as.numeric(TiempoViaje[ModoAgregado == "Transporte Privado/Auto"]*Factor_Viaje[ModoAgregado == "Transporte Privado/Auto"]))/sum(Factor_Persona[ModoAgregado == "Transporte Privado/Auto"])*24*3600*240)),
"Transporte Publico"  = round(seconds_to_period(sum(as.numeric(TiempoViaje[ModoAgregado == "Transporte Publico"]*Factor_Viaje[ModoAgregado == "Transporte Publico"]))/sum(Factor_Persona[ModoAgregado == "Transporte Publico"])*24*3600*240)),
"Otros" = round(seconds_to_period(sum(as.numeric(TiempoViaje[ModoAgregado == "Otros"]*Factor_Viaje[ModoAgregado == "Otros"]))/sum(Factor_Persona[ModoAgregado == "Otros" ])*24*3600*240)),
"Promedio" = round(seconds_to_period(sum(as.numeric(TiempoViaje*Factor_Viaje))/sum(Factor_Persona)*24*3600*240)))
tmp.summary.Modo
3+2+4+6+.9
View(total.ciudad)
rm(list=ls())
library(rgdal); library(readxl); library(dplyr); library(RCurl)
setwd("C:/Users/Rodrigo Villegas/Documents/Cedeus_ISCh/Cedeus_ISCh/19. Acceso y Calidad a Educacion/")
ciudades <- read.csv("Otros/Ciudades_Cedeus.csv")
calidad <- read_excel("Raw Data/20150409_SNED_2014_2015.xlsx") %>%
subset(select = c("RBD", "DV_RBD", "NOM_RBD", "COD_COM_RBD","INDICER" ))
calidad$Ciudad <- ciudades[match(calidad[["COD_COM_RBD"]], ciudades[["Codigo"]] ), "Ciudad"]
calidad <- calidad[(!is.na(calidad$Ciudad)),] %>%
group_by(Ciudad) %>%
mutate(breakpoint = quantile(INDICER, .35)[[1]]) %>%
subset(INDICER > breakpoint)
edu <- read.csv("Raw Data/20151007_Directorio_Oficial_EE_2015_20150831_PUBL.csv", sep = ";") %>%
subset(select = c("RBD", "DGV_RBD", "NOM_RBD","COD_COM_RBD","DIR_RBD",
"LATITUD", "LONGITUD","PAGO_MENSUAL"))
edu <- edu[edu$COD_COM_RBD %in% ciudades$Codigo, ]
edu.calidad <- merge(edu, calidad, by.x = c("RBD", "DGV_RBD"), by.y = c("RBD", "DV_RBD"), all = T) %>%
subset(select = c("RBD", "DGV_RBD", "NOM_RBD.x", "COD_COM_RBD.x", "DIR_RBD",
"LONGITUD", "LATITUD", "INDICER",
"PAGO_MENSUAL", "Ciudad")) %>%
subset(!is.na(INDICER) & PAGO_MENSUAL %in% c("GRATUITO", "$1.000 A $10.000", "$10.001 A $25.000") )
View(edu)
