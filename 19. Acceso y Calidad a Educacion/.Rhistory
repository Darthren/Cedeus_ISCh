mes.anterior.inicio <- currentDate - as.numeric(days(day(Sys.Date())))
mes.anterior.inicio <-  mes.anterior.inicio - as.numeric(days(day(mes.anterior.inicio) - 1))
mes.anterior.inicio
mes.anterior.inicio
mes.anterior.final
mes.anterior.inicio <- currentDate - as.numeric(days(day(Sys.Date())))
mes.anterior.inicio <-  mes.anterior.inicio - as.numeric(days(day(mes.anterior.inicio) - 2))
mes.anterior.inicio
mes.anterior.final <- currentDate - as.numeric(days(day(Sys.Date())))
mes.anterior.inicio <- currentDate - as.numeric(days(day(Sys.Date())))
mes.anterior.inicio <-  mes.anterior.inicio - as.numeric(days(day(mes.anterior.inicio) - 2))
mes.anterior.inicio
db <- odbcConnect("AL900s", uid="sa",pwd="admin!@#sa123")
car_data_full <- sqlFetch(db, "Table_car")
car_data <- car_data_full[which((car_data_full$strCarNum %in% Patente) & car_data_full$strOwnerName == "Siglo Verde"),]
print("Capturando Datos ...")
datos <- harvester(car_data, db, mes.anterior.inicio, mes.anterior.final, gpsmalo = c(0))
datos_trabajo <- datos[which(datos$Velocidad < vcorte),]
close(db)
lonlat <- data.frame(lon = datos_trabajo$Longitud,lat = datos_trabajo$Latitud)
datos.sp <- SpatialPointsDataFrame(coords = lonlat, data = datos_trabajo, proj4string = CRS("+proj=longlat +datum=WGS84"))
paradas <- readOGR(dsn = "E:/SigloVerde/General Shapes", layer = "Paradas_Aljibe", encoding = "UTF-8",)
lonlat <- data.frame(lon = datos_trabajo$Longitud,lat = datos_trabajo$Latitud)
datos.sp <- SpatialPointsDataFrame(coords = lonlat, data = datos_trabajo, proj4string = CRS("+proj=longlat +datum=WGS84"))
paradas <- readOGR(dsn = "E:/SigloVerde/General Shapes", layer = "Paradas_Aljibe", encoding = "UTF-8")
datos.sp <- spTransform(datos.sp, proj4string(paradas))
polyshape_buffer <- gBuffer(paradas, width=20, quadsegs=20, byid = TRUE)
datos.clip <- datos.sp[polyshape_buffer,]
writeOGR(as(trabajo_clip, "SpatialPointsDataFrame" ), carpetashape, paste(Shape, "_trabajo", sep = ""), driver = "ESRI Shapefile",overwrite_layer=TRUE)
datos_clip <- shape_identifier(datos.clip, polyshape_buffer, datos.sp, paradas)
paradas <- readOGR(dsn = "E:/SigloVerde/General Shapes", layer = "Paradas_Aljibe", encoding = "UTF-8")
datos.sp <- spTransform(datos.sp, proj4string(paradas))
polyshape_buffer <- gBuffer(paradas, width=20, quadsegs=20, byid = TRUE)
paradas <- readOGR(dsn = "E:/SigloVerde/General Shapes", layer = "Paradas_Aljibe", encoding = "UTF-8")
datos.sp <- spTransform(datos.sp, proj4string(paradas))
polyshape_buffer <- gBuffer(paradas, width=20, quadsegs=20, byid = TRUE)
datos.clip <- datos.sp[polyshape_buffer,]
writeOGR(as(trabajo_clip, "SpatialPointsDataFrame" ), carpetashape, paste(Shape, "_trabajo", sep = ""), driver = "ESRI Shapefile",overwrite_layer=TRUE)
datos.sp
rm(list=ls())
directory <- "E:/SigloVerde/Source Code"
source("E:/SigloVerde/Source Code/sourceDir.R")
sourceDir(directory)
Carpeta.Destino <- "E:/SigloVerde/03 Informes Mensuales"
Patente <- Plate_Collector("Obra Macul", "ALJIBE")
CarpetaOrigen <- "E:/SigloVerde/Obra Macul/Aljibe/"
Día <- Sys.Date()-1
Fechainicio <- paste(Sys.Date()-1, "00:00:00", sep = " ")
Fechafinal <- paste(Día, "23:59:59", sep = " ")
Shape <- "Paradas"
Empresa <- "Siglo Verde"
Obra <- "Macul"
vcorte <- 50
currentDate <-Sys.Date()
mes.anterior.final <- currentDate - as.numeric(days(day(Sys.Date())))
mes.anterior.inicio <- currentDate - as.numeric(days(day(Sys.Date())))
mes.anterior.inicio <-  mes.anterior.inicio - as.numeric(days(day(mes.anterior.inicio) - 2))
db <- odbcConnect("AL900s", uid="sa",pwd="admin!@#sa123")
car_data_full <- sqlFetch(db, "Table_car")
car_data <- car_data_full[which((car_data_full$strCarNum %in% Patente) & car_data_full$strOwnerName == "Siglo Verde"),]
print("Capturando Datos ...")
datos <- harvester(car_data, db, mes.anterior.inicio, mes.anterior.final, gpsmalo = c(0))
datos_trabajo <- datos[which(datos$Velocidad < vcorte),]
close(db)
lonlat <- data.frame(lon = datos_trabajo$Longitud,lat = datos_trabajo$Latitud)
lonlat
datos.sp <- SpatialPointsDataFrame(coords = lonlat, data = datos_trabajo, proj4string = CRS("+proj=longlat +datum=WGS84"))
paradas <- readOGR(dsn = "E:/SigloVerde/General Shapes", layer = "Paradas_Aljibe", encoding = "UTF-8")
datos.sp <- spTransform(datos.sp, proj4string(paradas))
polyshape_buffer <- gBuffer(paradas, width=20, quadsegs=20, byid = TRUE)
datos.clip <- datos.sp[polyshape_buffer,]
datos_clip <- shape_identifier(datos.clip, polyshape_buffer, datos.sp, paradas)
datos.clip <- datos.sp[paradas,]
lista_datos_total <- split(datos.sp@data, datos.sp$Patente)
paradas_total <- data.frame()
for (e in seq(lista_datos_total)){
tmp1 <- as.data.frame(lista_datos_total[[e]])
tmp2 <- stop_duration(tmp1, LonLat = T)
paradas_total <- rbind(paradas_total, tmp2)
}
paradas_total <- corrector(paradas_total, Type = "Paradas")
print("Calculando duración de paradas ...")
lista_datos <- split(datos.clip@data, datos.clip$Patente)
paradas_poly <- data.frame()
for (e in seq(lista_datos)){
tmp1 <- as.data.frame(lista_datos[[e]])
tmp2 <- stop_duration(tmp1, datos_clip = datos_clip)
paradas_poly <- rbind(paradas_poly, tmp2)
}
print("Calculando distancias recorridas ...")
paradas_poly <- distance_traveled(paradas_poly, datos)
resumen <- paradas_poly[grep(pattern = "Copec|Carga",  paradas_poly$Nombre),] %>%
group_by(Patente, Nombre) %>%
summarize(Paradas = n())
resumen
Patente
grep(pattern = "Copec|Carga",  paradas_poly$Nombre)
paradas_poly
paradas_poly
unique(paradas_poly@data)
unique(paradas_poly$Patente})
unique(paradas_poly$Patente)
View(paradas_poly)
resumen
Patente <- Plate_Collector("Obra La Florida", "ALJIBE")
Patente
library(RODBC); library(lubridate); library(dplyr); library(rgdal);
library(rgeos); library(geosphere); library(xlsx); library(chron)
directory <- "E:/SigloVerde/Source Code"
source("E:/SigloVerde/Source Code/sourceDir.R")
sourceDir(directory)
Carpeta.Destino <- "E:/SigloVerde/03 Informes Mensuales"
Patente <- Plate_Collector("Obra La Florida", "ALJIBE")
CarpetaOrigen <- "E:/SigloVerde/Obra Macul/Aljibe/"
Día <- Sys.Date()-1
Fechainicio <- paste(Sys.Date()-1, "00:00:00", sep = " ")
Fechafinal <- paste(Día, "23:59:59", sep = " ")
Shape <- "Paradas"
Empresa <- "Siglo Verde"
Obra <- "Macul"
vcorte <- 50
currentDate <-Sys.Date()
mes.anterior.final <- currentDate - as.numeric(days(day(Sys.Date())))
mes.anterior.inicio <- currentDate - as.numeric(days(day(Sys.Date())))
mes.anterior.inicio <-  mes.anterior.inicio - as.numeric(days(day(mes.anterior.inicio) - 2))
db <- odbcConnect("AL900s", uid="sa",pwd="admin!@#sa123")
car_data_full <- sqlFetch(db, "Table_car")
car_data <- car_data_full[which((car_data_full$strCarNum %in% Patente) & car_data_full$strOwnerName == "Siglo Verde"),]
# Leer datos
print("Capturando Datos ...")
datos <- harvester(car_data, db, mes.anterior.inicio, mes.anterior.final, gpsmalo = c(0))
datos_trabajo <- datos[which(datos$Velocidad < vcorte),]
close(db)
lonlat <- data.frame(lon = datos_trabajo$Longitud,lat = datos_trabajo$Latitud)
datos.sp <- SpatialPointsDataFrame(coords = lonlat, data = datos_trabajo, proj4string = CRS("+proj=longlat +datum=WGS84"))
paradas <- readOGR(dsn = "E:/SigloVerde/General Shapes", layer = "Paradas_Aljibe", encoding = "UTF-8")
datos.sp <- spTransform(datos.sp, proj4string(paradas))
polyshape_buffer <- gBuffer(paradas, width=20, quadsegs=20, byid = TRUE)
datos.clip <- datos.sp[polyshape_buffer,]
writeOGR(as(trabajo_clip, "SpatialPointsDataFrame" ), carpetashape, paste(Shape, "_trabajo", sep = ""), driver = "ESRI Shapefile",overwrite_layer=TRUE)
datos_clip <- shape_identifier(datos.clip, polyshape_buffer, datos.sp, paradas)
datos.clip <- datos.sp[paradas,]
lista_datos_total <- split(datos.sp@data, datos.sp$Patente)
paradas_total <- data.frame()
for (e in seq(lista_datos_total)){
tmp1 <- as.data.frame(lista_datos_total[[e]])
tmp2 <- stop_duration(tmp1, LonLat = T)
paradas_total <- rbind(paradas_total, tmp2)
}
paradas_total <- corrector(paradas_total, Type = "Paradas")
print("Calculando duración de paradas ...")
lista_datos <- split(datos.clip@data, datos.clip$Patente)
paradas_poly <- data.frame()
for (e in seq(lista_datos)){
tmp1 <- as.data.frame(lista_datos[[e]])
tmp2 <- stop_duration(tmp1, datos_clip = datos_clip)
paradas_poly <- rbind(paradas_poly, tmp2)
}
print("Calculando distancias recorridas ...")
paradas_poly <- distance_traveled(paradas_poly, datos)
#writeOGR(datos.sp, Carpeta.Destino, "puntos test", encoding = "UTF-8", driver = "ESRI Shapefile", overwrite_layer = T)
resumen <- paradas_poly[grep(pattern = "Copec|Carga",  paradas_poly$Nombre),] %>%
group_by(Patente, Nombre) %>%
summarize(Paradas = n())
resumen
library(RODBC); library(lubridate); library(dplyr); library(rgdal);
library(rgeos); library(geosphere); library(xlsx); library(chron)
directory <- "E:/SigloVerde/Source Code"
source("E:/SigloVerde/Source Code/sourceDir.R")
sourceDir(directory)
Carpeta.Destino <- "E:/SigloVerde/03 Informes Mensuales"
Patente <- Plate_Collector("Obra Caldera", "ALJIBE")
CarpetaOrigen <- "E:/SigloVerde/Obra Macul/Aljibe/"
Día <- Sys.Date()-1
Fechainicio <- paste(Sys.Date()-1, "00:00:00", sep = " ")
Fechafinal <- paste(Día, "23:59:59", sep = " ")
Shape <- "Paradas"
Empresa <- "Siglo Verde"
Obra <- "Macul"
vcorte <- 50
currentDate <-Sys.Date()
mes.anterior.final <- currentDate - as.numeric(days(day(Sys.Date())))
mes.anterior.inicio <- currentDate - as.numeric(days(day(Sys.Date())))
mes.anterior.inicio <-  mes.anterior.inicio - as.numeric(days(day(mes.anterior.inicio) - 2))
db <- odbcConnect("AL900s", uid="sa",pwd="admin!@#sa123")
car_data_full <- sqlFetch(db, "Table_car")
car_data <- car_data_full[which((car_data_full$strCarNum %in% Patente) & car_data_full$strOwnerName == "Siglo Verde"),]
# Leer datos
print("Capturando Datos ...")
datos <- harvester(car_data, db, mes.anterior.inicio, mes.anterior.final, gpsmalo = c(0))
datos_trabajo <- datos[which(datos$Velocidad < vcorte),]
close(db)
lonlat <- data.frame(lon = datos_trabajo$Longitud,lat = datos_trabajo$Latitud)
datos.sp <- SpatialPointsDataFrame(coords = lonlat, data = datos_trabajo, proj4string = CRS("+proj=longlat +datum=WGS84"))
paradas <- readOGR(dsn = "E:/SigloVerde/General Shapes", layer = "Paradas_Aljibe", encoding = "UTF-8")
datos.sp <- spTransform(datos.sp, proj4string(paradas))
polyshape_buffer <- gBuffer(paradas, width=20, quadsegs=20, byid = TRUE)
datos.clip <- datos.sp[polyshape_buffer,]
writeOGR(as(trabajo_clip, "SpatialPointsDataFrame" ), carpetashape, paste(Shape, "_trabajo", sep = ""), driver = "ESRI Shapefile",overwrite_layer=TRUE)
datos_clip <- shape_identifier(datos.clip, polyshape_buffer, datos.sp, paradas)
datos.clip <- datos.sp[paradas,]
lista_datos_total <- split(datos.sp@data, datos.sp$Patente)
paradas_total <- data.frame()
for (e in seq(lista_datos_total)){
tmp1 <- as.data.frame(lista_datos_total[[e]])
tmp2 <- stop_duration(tmp1, LonLat = T)
paradas_total <- rbind(paradas_total, tmp2)
}
paradas_total <- corrector(paradas_total, Type = "Paradas")
print("Calculando duración de paradas ...")
lista_datos <- split(datos.clip@data, datos.clip$Patente)
paradas_poly <- data.frame()
for (e in seq(lista_datos)){
tmp1 <- as.data.frame(lista_datos[[e]])
tmp2 <- stop_duration(tmp1, datos_clip = datos_clip)
paradas_poly <- rbind(paradas_poly, tmp2)
}
print("Calculando distancias recorridas ...")
paradas_poly <- distance_traveled(paradas_poly, datos)
#writeOGR(datos.sp, Carpeta.Destino, "puntos test", encoding = "UTF-8", driver = "ESRI Shapefile", overwrite_layer = T)
resumen <- paradas_poly[grep(pattern = "Copec|Carga",  paradas_poly$Nombre),] %>%
group_by(Patente, Nombre) %>%
summarize(Paradas = n())
resumen
View(car_data_full)
library(RODBC); library(lubridate); library(dplyr); library(rgdal);
library(rgeos); library(geosphere); library(xlsx); library(chron)
directory <- "E:/SigloVerde/Source Code"
source("E:/SigloVerde/Source Code/sourceDir.R")
sourceDir(directory)
Carpeta.Destino <- "E:/SigloVerde/03 Informes Mensuales"
Patente <- Plate_Collector("Obra Viña", "ALJIBE")
CarpetaOrigen <- "E:/SigloVerde/Obra Macul/Aljibe/"
Día <- Sys.Date()-1
Fechainicio <- paste(Sys.Date()-1, "00:00:00", sep = " ")
Fechafinal <- paste(Día, "23:59:59", sep = " ")
Shape <- "Paradas"
Empresa <- "Siglo Verde"
Obra <- "Macul"
vcorte <- 50
currentDate <-Sys.Date()
mes.anterior.final <- currentDate - as.numeric(days(day(Sys.Date())))
mes.anterior.inicio <- currentDate - as.numeric(days(day(Sys.Date())))
mes.anterior.inicio <-  mes.anterior.inicio - as.numeric(days(day(mes.anterior.inicio) - 2))
db <- odbcConnect("AL900s", uid="sa",pwd="admin!@#sa123")
car_data_full <- sqlFetch(db, "Table_car")
car_data <- car_data_full[which((car_data_full$strCarNum %in% Patente) & car_data_full$strOwnerName == "Siglo Verde"),]
# Leer datos
print("Capturando Datos ...")
datos <- harvester(car_data, db, mes.anterior.inicio, mes.anterior.final, gpsmalo = c(0))
datos_trabajo <- datos[which(datos$Velocidad < vcorte),]
close(db)
lonlat <- data.frame(lon = datos_trabajo$Longitud,lat = datos_trabajo$Latitud)
datos.sp <- SpatialPointsDataFrame(coords = lonlat, data = datos_trabajo, proj4string = CRS("+proj=longlat +datum=WGS84"))
paradas <- readOGR(dsn = "E:/SigloVerde/General Shapes", layer = "Paradas_Aljibe", encoding = "UTF-8")
datos.sp <- spTransform(datos.sp, proj4string(paradas))
polyshape_buffer <- gBuffer(paradas, width=20, quadsegs=20, byid = TRUE)
datos.clip <- datos.sp[polyshape_buffer,]
writeOGR(as(trabajo_clip, "SpatialPointsDataFrame" ), carpetashape, paste(Shape, "_trabajo", sep = ""), driver = "ESRI Shapefile",overwrite_layer=TRUE)
datos_clip <- shape_identifier(datos.clip, polyshape_buffer, datos.sp, paradas)
datos.clip <- datos.sp[paradas,]
lista_datos_total <- split(datos.sp@data, datos.sp$Patente)
paradas_total <- data.frame()
for (e in seq(lista_datos_total)){
tmp1 <- as.data.frame(lista_datos_total[[e]])
tmp2 <- stop_duration(tmp1, LonLat = T)
paradas_total <- rbind(paradas_total, tmp2)
}
paradas_total <- corrector(paradas_total, Type = "Paradas")
print("Calculando duración de paradas ...")
lista_datos <- split(datos.clip@data, datos.clip$Patente)
paradas_poly <- data.frame()
for (e in seq(lista_datos)){
tmp1 <- as.data.frame(lista_datos[[e]])
tmp2 <- stop_duration(tmp1, datos_clip = datos_clip)
paradas_poly <- rbind(paradas_poly, tmp2)
}
print("Calculando distancias recorridas ...")
paradas_poly <- distance_traveled(paradas_poly, datos)
#writeOGR(datos.sp, Carpeta.Destino, "puntos test", encoding = "UTF-8", driver = "ESRI Shapefile", overwrite_layer = T)
resumen <- paradas_poly[grep(pattern = "Copec|Carga",  paradas_poly$Nombre),] %>%
group_by(Patente, Nombre) %>%
summarize(Paradas = n())
resumen
fibo <- function(a,b,counter){
if (counter == 0){
return(a+b)
}
return(fibo(a,b,counter -1))
}
fibo(1,2,10)
fibo <- function(a,b,counter){
if (counter == 0){
return(a+b)
}
return(fibo(a,b,counter-1))
}
fibo(1,2,10)
fibo(1,2,10)
fibo(1,2,3)
fibo(1,2, counter = 10)
fibo <- function(a,b,counter){
if (counter == 0){
return(a+b)
} else {return(fibo(a,b,counter-1))}
}
fibo(1,2, counter = 10)
counter = 10
a <- 1
b = 2
if (counter == 0){
return(a+b)
}
counter == 0
fibo(a,b,counter-1)
fibo(a,b,counter-1)
fibo(a,b,counter-1)
fibo(a,b,counter-1)
fibo(a,b,counter-1)
counter-1
fibo <- function(a,b,counter){
if (counter == 0){
return(a+b)
}
return(fibo(counter*a,b,counter-1))
}
fibo(1,2, counter = 10)
fibo <- function(a,b,counter){
if (counter == 0){
return(a+b)
}
return(fibo(a,b+a,counter-1))
}
fibo(1,2, counter = 10)
fibo <- function(a,b,counter){
if (counter == 0){
return(a+b)
}
return(fibo(a,b+a,counter-1))
}
fibo(0,1, counter = 10)
recurse_fibonacci <- function(n) {
if(n <= 1) {
return(n)
} else {
return(recurse_fibonacci(n-1) + recurse_fibonacci(n-2))
}
}
recurse_fibonacci(10)
recurse_fibonacci(1)
recurse_fibonacci(2)
recurse_fibonacci(3)
recurse_fibonacci(4)
recurse_fibonacci(5)
recurse_fibonacci(6)
recurse_fibonacci(7)
recurse_fibonacci(8)
recurse_fibonacci(9)
recurse_fibonacci(10)
recurse_fibonacci <- function(n) {
if(n <= 1) {
return(n)
} else {
return(recurse_fibonacci(n-1) + recurse_fibonacci(n-2))
}
}
recurse_fibonacci(10)
test.fun <- function(x, y){
if(x <= 1) {
print(y[x])
} else {
print(y[x])
return(test.fun(x-1,y))
}
}
y <- sample(1:100, 10)
test.fun(10,y)
test.fun(10,y)
y <- sample(1:100, 10)
test.fun(10,y)
rm(list=ls())
setwd("E:/Cedeus Sustainability Indicators/Datos/19. Acceso y Calidad a Educación/")
edu <- read.csv("Raw Data/20160923_Directorio_Oficial_EE_2016_20160430_PUBL.csv")
edu <- read.csv("Raw Data/20160923_Directorio_Oficial_EE_2016_20160430_PUBL.csv", )
edu <- read.csv("Raw Data/20160923_Directorio_Oficial_EE_2016_20160430_PUBL.csv", sep = ",")
edu <- read.csv("Raw Data/20160923_Directorio_Oficial_EE_2016_20160430_PUBL.csv", sep = ";")
View(edu)
edu <- read.csv("Raw Data/20160923_Directorio_Oficial_EE_2016_20160430_PUBL.csv", sep = ";")
edu <- read.csv("Raw Data/20160923_Directorio_Oficial_EE_2016_20160430_PUBL.csv", sep = ";", nrows = 30000)
View(edu)
edu <- read.csv("Raw Data/20160923_Directorio_Oficial_EE_2016_20160430_PUBL.csv", sep = ";", quote = "")
edu <- read.csv("Raw Data/20160923_Directorio_Oficial_EE_2016_20160430_PUBL.csv",
sep = ";", header = T)
edu <- read.csv("Raw Data/20160923_Directorio_Oficial_EE_2016_20160430_PUBL.csv",
sep = ";", quote = "")
edu <- read.csv("Raw Data/20160923_Directorio_Oficial_EE_2016_20160430_PUBL.csv",
sep = ";", quote = " ")
edu <- read.csv("Raw Data/20160923_Directorio_Oficial_EE_2016_20160430_PUBL.csv",
sep = ";", quote = "")
(n_fields <- count.fields("Raw Data/20160923_Directorio_Oficial_EE_2016_20160430_PUBL.csv"))
(n_fields <- count.fields("Raw Data/20160923_Directorio_Oficial_EE_2016_20160430_PUBL.csv"))
if(any(diff(n_fields)))
{
warning("There's a problem with the file")
}
?count.fields
cat("NAME", "1:John", "2:Paul", file = "foo", sep = "\n")
count.fields("foo", sep = ":")
unlink("foo")
> cat("NAME", "1:John", "2:Paul", file = "foo", sep = "\n")
cat("NAME", "1:John", "2:Paul", file = "foo", sep = "\n")
?cat
x2 <- read.table("Raw Data/Directorio_Oficial_2016.txt", header = T, sep=";",
quote="'", stringsAsFactors=FALSE, fill=TRUE)
x2 <- read.table("Raw Data/Directorio_Oficial_2016.txt", header = T, sep=";",
quote="", stringsAsFactors=FALSE, fill=TRUE)
View(x2)
tail(x2)
edu <- read.csv("Raw Data/20160923_Directorio_Oficial_EE_2016_20160430_PUBL.csv",
sep = ";", encoding = "UTF-8")
edu <- read.csv("Raw Data/20160923_Directorio_Oficial_EE_2016_20160430_PUBL.csv",
sep = ";", encoding = "UTF-8")
tail(edu)
View(edu)
edu <- read.csv("Raw Data/20160923_Directorio_Oficial_EE_2016_20160430_PUBL.csv",
sep = ";", encoding = "UTF-8")
View(edu)
edu <- read.csv("Raw Data/20160923_Directorio_Oficial_EE_2016_20160430_PUBL.csv",
sep = ";", encoding = "UTF-8")
View(edu)
edu <- read.csv("Raw Data/20160923_Directorio_Oficial_EE_2016_20160430_PUBL.csv",
sep = ";")
View(edu)
edu <- read.csv("Raw Data/20160923_Directorio_Oficial_EE_2016_20160430_PUBL.csv",
sep = ";", encoding = "ANSI")
View(edu)
x2 <- read.table("Raw Data/Directorio_Oficial_2016.txt", header = T, sep=";",
quote="", stringsAsFactors=FALSE, fill=TRUE)
x2 <- read.table("Raw Data/Directorio_Oficial_2016.txt", header = T, sep=";",
quote="", stringsAsFactors=FALSE, fill=TRUE)
View(x2)
edu <- read.table("Raw Data/Directorio_Oficial_2016.txt", header = T, sep=";",
quote="", stringsAsFactors=FALSE, fill=TRUE)
rm(list=ls())
# Indicador
setwd("E:/Cedeus Sustainability Indicators/Datos/19. Acceso y Calidad a Educación/")
edu <- read.table("Raw Data/Directorio_Oficial_2016.txt", header = T, sep=";",
quote="", stringsAsFactors=FALSE, fill=TRUE)
View(edu)
edu <- edu[edu$PAGO_MENSUAL %in% c("GRATUITO", "$1.000 A $10.000", "$10.001 A $25.000"), ]
View(edu)
ciudades <- read.csv("Otros/Ciudades_Cedeus.csv")
View(ciudades)
edu <- edu[edu$PAGO_MENSUAL %in% c("GRATUITO", "$1.000 A $10.000", "$10.001 A $25.000") &
edu$COD_COM_RBD %in% ciudades$Codigo, ]
edu$LATITUD > 0
sum(edu$LATITUD > 0)
sum(edu$LONGITUD > 0)
sum(edu$LONGITUD < 0)
sum(edu$LONGITUD == 0)
no.data <- edu[edu$LONGITUD == 0,]
View(no.data)
direcciones <- no.data$DIR_RBD
library(ggmap)
latlon <- geocode(direcciones[1])
latlon
latlon <- geocode(direcciones)
latlon
laton[lon]
latlon[lon]
latlon["lon"]
no.data$LONGITUD <- latlon["lon"]
no.data$LATITUD <- latlon["lat"]
View(no.data)
sum(latlon$lon > 0 | latlon$lat > 0)
sum(latlon$lon > 0)
latlon$lon
sum(latlon$lat > 0)
latlon$lat
latlon$lat > 0
sum(latlon$lat > 0, na.rm = T)
sum((latlon$lat > 0 | latlon$lon > 0), na.rm = T)
sum((latlon$lat > 0 | latlon$lat < -70), na.rm = T)
sum((latlon$lat > 0 | latlon$lon < -70), na.rm = T)
latlon$lon < -70
latlon$lon
sum((latlon$lat > 0 | latlon$lon < -80), na.rm = T)
latlon$lon < -80
31+17
85-48
geocode("COLEGIO BAQUEDANO")
nombres <- no.data$NOM_RBD
latlon.byname <- geocode(nombres)
View(latlon.byname)
nombres
no.data$latlon.byname <- latlon.byname["lon"]
no.data$latlon.byname <- latlon.byname["lat"]
View(no.data)
new.data$LONGITUD <- latlon.byname["lon"]
new.data$LATITUD <- latlon.byname["lat"]
neew.data <- data.frame()
new.data$LONGITUD <- latlon.byname["lon"]
new.data$LATITUD <- latlon.byname["lat"]
new.data <- data.frame()
new.data$LONGITUD <- latlon.byname["lon"]
new.data$LATITUD <- latlon.byname["lat"]
new.data <- data.frame(nombre = nombres, direccion = direcciones,
longitud = latlon.byname["lon"],
latitud = latlon.byname["lat"])
View(new.data)
plot(new.data$lon, new.data$lat)
geocode("ESCUELA DE PARVULO Y ESPECIAL MARTA HIDALGO")
